<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on cat /dev/random</title>
    <link>http://192.241.186.225/tags/python/</link>
    <description>Recent content in Python on cat /dev/random</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    
    <lastBuildDate>Mon, 03 Nov 2014 12:34:58 AST</lastBuildDate>
    <atom:link href="http://192.241.186.225/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Demystifying Decorators</title>
      <link>http://192.241.186.225/articles/demistifying-decorators/</link>
      <pubDate>Mon, 03 Nov 2014 12:34:58 AST</pubDate>
      
      <guid>http://192.241.186.225/articles/demistifying-decorators/</guid>
      <description>

&lt;p&gt;If you&amp;rsquo;ve been programming in Python for some time chances are you have come across decorators. Even though you might not know what decorators are and how they work, you&amp;rsquo;ve surely used them as most of popular Python libraries use decorators (the familiar &lt;code&gt;@&lt;/code&gt; syntax) to make beautiful APIs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://flask.pocoo.org/&#34;&gt;Flask&lt;/a&gt;, for example, exposes decorators for setting routes. &lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;Django&lt;/a&gt; has a familiar &lt;code&gt;login_required&lt;/code&gt; decorator that allows the user to force authentication for a view.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Flask Example
@app.route(&#39;/&#39;) # a decorator
def main():
    return render_template(&#39;index.html&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# Django Example
from django.contrib.auth.decorators import login_required

@login_required # a decorator
def my_view(request):
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What are &lt;strong&gt;decorators&lt;/strong&gt;? Quite simply,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Decorators are &lt;a href=&#34;http://en.wikipedia.org/wiki/Syntactic_sugar&#34;&gt;syntatic sugar&lt;/a&gt; for executing code before and after the function you decorate&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quite a few articles have been written about decorators for beginner and experienced programmers alike. However, what I&amp;rsquo;ve found generally missing is they are littered with fake examples that are hard to relate to. As a result, although you do understand decorators conceptually, its hard to use that knowledge into your next program.&lt;/p&gt;

&lt;p&gt;In this blog post, I intend that cover a very realistic example that I encountered while recently working on a project at my workplace. Hopefully, this will help you understand on how decorators can be used to design more intuitive abstractions in fewer lines of code.&lt;/p&gt;

&lt;h3 id=&#34;the-problem:a8729dfc7d8d6429c71315b7183203ea&#34;&gt;The Problem&lt;/h3&gt;

&lt;p&gt;Well lets just say that you are required to make a CRUD app. You are required to just query the database and show the results on a webpage. But this time, you are not allowed to use an ORM as your boss hates everything that has a 3-letter acronym. Your only option now is to write plain-old SQL&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a8729dfc7d8d6429c71315b7183203ea:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a8729dfc7d8d6429c71315b7183203ea:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; to build this app.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve been not spoiled by using ORM you&amp;rsquo;d remember that too query a DB you need to do the following&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get a connection to the DB&lt;/li&gt;
&lt;li&gt;Request for a reference to a cursor from the DB object&lt;/li&gt;
&lt;li&gt;Execute the SQL on the cursor reference&lt;/li&gt;
&lt;li&gt;For a &lt;code&gt;READ&lt;/code&gt;- Fetch the results from the cursor&lt;/li&gt;
&lt;li&gt;For a &lt;code&gt;WRITE&lt;/code&gt;- Commit the transaction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that in mind, this is how my db functions looked like -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from MySQL.db.cursor import DictCursor

def get_deals(id):
    db = get_db()
    c = db.cursor(DictCursor)
    c.execute(&amp;quot;select id, deal, duedate from deals where id = &#39;%s&#39;&amp;quot; % (id, ))
    results = c.fetchall()
    return results

def get_account(account):
    db = get_db()
    c = db.cursor(DictCursor)
    c.execute(&amp;quot;select name, account from accounts where id = &#39;%s&#39;&amp;quot; % (account,))
    result = c.fetchone()
    return result
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As evident from above, I had to write quite a few functions for every query that I wanted to fire on the database. For demonstration, the queries shown above are quite simple, in reality, I had to write a query spanning multiple joins so that there&amp;rsquo;s just one query fired for every page load.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m sure the problem is clearly evident. Duplicating code across a number of functions is quite problematic. Right off your head, you are thinking that this can be solved by declaring a simple wrapper function but if you look closely, doing anything fancy with the results or customizing the query will not be flexible.&lt;/p&gt;

&lt;h3 id=&#34;decorators:a8729dfc7d8d6429c71315b7183203ea&#34;&gt;Decorators&lt;/h3&gt;

&lt;p&gt;Lets see how we can use decorators to remove the code duplication while ensuring flexibility.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a8729dfc7d8d6429c71315b7183203ea:1&#34;&gt;You see what I did there?
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a8729dfc7d8d6429c71315b7183203ea:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Enums in Python</title>
      <link>http://192.241.186.225/articles/enums-in-python/</link>
      <pubDate>Mon, 12 May 2014 12:34:58 AST</pubDate>
      
      <guid>http://192.241.186.225/articles/enums-in-python/</guid>
      <description>

&lt;p&gt;On 12th May 2013, Guido accepted the Python Enhancement Proposal 435 which suggests adding an Enum type to the Python standard library. The news caused a lot of commotion in the Python community and generated (mostly) healthy discussions on &lt;a href=&#34;https://news.ycombinator.com/item?id=5685903&#34;&gt;Hacker News&lt;/a&gt;. In this post I&amp;rsquo;ll give an introduction to what enums are and talk about how you can use them in your programs.&lt;/p&gt;

&lt;h3 id=&#34;enumerated-types:e3148644896893fddfa65ad9cd139576&#34;&gt;Enumerated Types&lt;/h3&gt;

&lt;p&gt;According to &lt;a href=&#34;http://en.wikipedia.org/wiki/Enumerated_type&#34;&gt;Wikipedia&lt;/a&gt;, an enumerated type is a data type consisting of a set of named values called elements, members or enumerators of the type. The enumerator names are usually identifiers that behave as constants in the language.&lt;/p&gt;

&lt;p&gt;In other words, an enumeration is a set of symbolic names useful for
defining an &lt;strong&gt;immutable&lt;/strong&gt;, &lt;strong&gt;related&lt;/strong&gt; set of &lt;strong&gt;constant values&lt;/strong&gt;. It is like a class of constants that are immutable and related which can be used throughout your programs.&lt;/p&gt;

&lt;p&gt;For example, an enumerated type called &lt;code&gt;Days_of_Week&lt;/code&gt; may be defined to consist of &lt;code&gt;sunday&lt;/code&gt;, &lt;code&gt;monday&lt;/code&gt;, &lt;code&gt;tuesday&lt;/code&gt;, &lt;code&gt;wednesday&lt;/code&gt; etc. Or an enumerated class for &lt;code&gt;Roles&lt;/code&gt; might contain &lt;code&gt;admin&lt;/code&gt;, &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;guest&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;why-enums:e3148644896893fddfa65ad9cd139576&#34;&gt;Why Enums?&lt;/h3&gt;

&lt;p&gt;Why do we need Enums? Aren&amp;rsquo;t the constructs already available in the
language capable of doing this? To answer the second question first, its true that similar functionality is possible. Developers all this while have been using a constants defined as INTS for this very purpose.  For example, check out &lt;a href=&#34;https://github.com/mitsuhiko/flask/wiki/Large-app-how-to#first-model-and-its-constants-file&#34;&gt;this&lt;/a&gt; definition of a model in SqlAlchemy.
Armin, the creator of flask, declares a few constants in the &lt;code&gt;constants.py&lt;/code&gt; file which look like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# User role
ADMIN = 0
STAFF = 1
USER = 2
ROLE = {
  ADMIN: &#39;admin&#39;,
  STAFF: &#39;staff&#39;,
  USER: &#39;user&#39;,
}

# user status
INACTIVE = 0
NEW = 1
ACTIVE = 2
STATUS = {
  INACTIVE: &#39;inactive&#39;,
  NEW: &#39;new&#39;,
  ACTIVE: &#39;active&#39;,
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem with this, however, is that these are ultimately integers. You can do a number of operations on them, which logically do not make sense. To point out another problem, imagine there are 100s of such roles. While debugging&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print user.role
0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;makes much less sense that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print user.role
Roles.admin #type enum
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, if there&amp;rsquo;s another set of constants which need the same values
(employee roles, for example) in which case these definitions might clash.&lt;/p&gt;

&lt;p&gt;Using enums allows us to write cleaner programs the above issues are
accounted for.
- Enums can have values distinct from each other.
- Operations (like multiplication) are not defined for these values&lt;/p&gt;

&lt;h3 id=&#34;usage:e3148644896893fddfa65ad9cd139576&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ll encourage you to the check out the &lt;a href=&#34;http://www.python.org/dev/peps/pep-0435/&#34;&gt;PEP&lt;/a&gt; for detailed (proposed) syntax but here a few examples.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from emum import Emum
 
Class Roles(Enum):
  admin = 0
  staff = 1
  user = 2

print(Roles.admin)               # &amp;gt;&amp;gt;&amp;gt; Roles.admin
print(repr(Roles.admin))         # &amp;gt;&amp;gt;&amp;gt; &amp;lt;Roles.admin: 0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make no mistake, the numbers indicated here are just values that are
assigned to the enum members and dont stand for anything. As mentioned in the PEP -
&lt;em&gt;Using integers is short and handy (and provided by default by the Functional API), but not strictly enforced. In the vast majority of use-cases, one doesn&amp;rsquo;t care what the actual value of an enumeration is. But if the value is important, enumerations can have arbitrary values.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Below is a list of important features as defined in the PEP&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enums support iteration in definition order&lt;/li&gt;
&lt;li&gt;Enum members are hashable.&lt;/li&gt;
&lt;li&gt;Duplication of enum members is not allowed. However, if two enum members have the same value then they are referred to as aliases.&lt;/li&gt;
&lt;li&gt;Finally, ordered comparisons are not supported as enums are not like
integers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The exact mechanics of how Enums will work are still not clear and are being
actively discussed on the mailing list. Hopefully, this post has helped you in
understanding in what the hullaboo is all about!&lt;/p&gt;

&lt;p&gt;See you next time!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Blueprints</title>
      <link>http://192.241.186.225/articles/using-blueprints/</link>
      <pubDate>Thu, 08 May 2014 12:34:58 AST</pubDate>
      
      <guid>http://192.241.186.225/articles/using-blueprints/</guid>
      <description>

&lt;p&gt;In today&amp;rsquo;s short lesson we&amp;rsquo;ll continue where we left off and completely wrap up the topic of code organization by learning about blueprints. &lt;a href=&#34;http://flask.pocoo.org/docs/blueprints/&#34;&gt;Blueprints&lt;/a&gt; have been a rather recent addition to flask (introduced in version 0.7) and were added to help users structure large applications into reusable components.&lt;/p&gt;

&lt;h3 id=&#34;blueprints:f0cac9f26d40801131474de4fca3c0eb&#34;&gt;Blueprints&lt;/h3&gt;

&lt;p&gt;What exactly are blueprints? Lets see what the official documentation has to say. &lt;em&gt;Flask uses a concept of blueprints for making application components and supporting common patterns within an application or across applications. Blueprints can greatly simplify how large applications work and provide a central means for Flask extensions to register operations on applications.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In other words, blueprints are essential to building a Flask site larger than a few endpoints. Blueprints also allow you to reuse components across multiple apps, or as releasing a set of endpoints as open source libraries that can be easily plugged into other apps. If its still not clear, I&amp;rsquo;m sure some code will drive the point home.&lt;/p&gt;

&lt;p&gt;Lets get started. Lets start with a simple app which looks like this -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|-- blogs
|  |-- __init__.py
|  |-- views.py
|  |-- static/
|  |-- templates/
|  |  |-- admin/
|  |  |  |-- index.html
|  |  |-- posts/
|  |  |  |-- index.html
|-- runserver.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m using the same structure as we discussed in the previous post, however,
given the scale of the app, I&amp;rsquo;m not using flask-script and instead have a simple
&lt;code&gt;runserver.py&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Contents of the &lt;code&gt;views.py&lt;/code&gt; file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from flask import render_template
from blogs import app

# routes for admin section
@app.route(&#39;/admin&#39;, defaults={&#39;page&#39;: &#39;index&#39;})
@app.route(&#39;/admin/&amp;lt;page&amp;gt;&#39;)
def admin_show(page):
  return render_template(&#39;admin/index.html&#39;, page=page)

# routes for the posts section
@app.route(&#39;/posts&#39;, defaults={&#39;page&#39;: &#39;index&#39;})
@app.route(&#39;/posts/&amp;lt;page&amp;gt;&#39;)
def posts_show(page):
  return render_template(&#39;posts/index.html&#39;, page=page)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Seeing the code above, I&amp;rsquo;m sure that the intent is quite clear. What I&amp;rsquo;m trying
to do is structure the main components in my application, &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;posts&lt;/code&gt; in
this case, in a single file. In the real world, there will be many more such
components which follow a common pattern and in such case having them all in
one place will be a real mess.&lt;/p&gt;

&lt;h3 id=&#34;restructuring:f0cac9f26d40801131474de4fca3c0eb&#34;&gt;Restructuring&lt;/h3&gt;

&lt;p&gt;Lets see how we solve this problem using blueprints. I&amp;rsquo;ve created two new
folders - each for admin and posts and initialized with a blank &lt;code&gt;__init__.py&lt;/code&gt;
file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|-- blogs
|  |-- __init__.py
|  |-- admin/
|  |  |-- __init__.py
|  |  |-- views.py
|  |-- posts/
|  |  |-- __init__.py
|  |  |-- views.py
|  |-- static/
|  |-- templates/
|  |  |-- admin/
|  |  |  |-- index.html
|  |  |-- posts/
|  |  |  |-- index.html
|-- runserver.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally, I&amp;rsquo;ve added two new &lt;code&gt;views.py&lt;/code&gt; in each of the folders. Here are the
contents of the two files&lt;/p&gt;

&lt;p&gt;&lt;code&gt;admin/views.py&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from flask import Blueprint, render_template
mod = Blueprint(&#39;admin&#39;, __name__, url_prefix=&#39;/admin&#39;)

# route handles for /admin and /admin/page
@mod.route(&#39;/&#39;, defaults={&#39;page&#39;: &#39;index&#39;})
@mod.route(&#39;/&amp;lt;page&amp;gt;&#39;)
def show(page):
  return render_template(&#39;admin/index.html&#39;, page=page)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;posts/views.py&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from flask import Blueprint, render_template
mod = Blueprint(&#39;posts&#39;, __name__, url_prefix=&#39;/posts&#39;)

# route handles for /posts and /posts/page
@mod.route(&#39;/&#39;, defaults={&#39;page&#39;: &#39;index&#39;})
@mod.route(&#39;/&amp;lt;page&amp;gt;&#39;)
def show(page):
  return render_template(&#39;posts/index.html&#39;, page=page)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we&amp;rsquo;re trying to do here is a setup the component as a blueprint. When a new
function is bound using the @mod.route decorator the blueprint will record the
function &lt;code&gt;show&lt;/code&gt; when it is later registered. Blueprints are considered to be
contained in a folder and the name of this folder is inferred from the second
argument to the &lt;code&gt;Blueprint&lt;/code&gt; constructor (&lt;code&gt;__name__&lt;/code&gt; in this case.) The third
argument, &lt;code&gt;url_prefix&lt;/code&gt; is what mounts the blueprint at a specific location.
Hence, in our admin blueprint will listen to the two endpoints - &lt;code&gt;/admin/&lt;/code&gt; and
&lt;code&gt;/admin/&amp;lt;page&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before we use our blueprints we need to register them on our app object. We can
do this in our main &lt;code&gt;__init__.py&lt;/code&gt; file. These are its new contents -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from flask import Flask
app = Flask(__name__)

# importing as module.. follow this pattern to include more modules
from blogs.admin.views import mod as adminModule
from blogs.posts.views import mod as postsModule

# registering the modules
app.register_blueprint(adminModule)
app.register_blueprint(postsModule)

# referencing the module views using url_for
@app.route(&#39;/&#39;)
def index():
    return &amp;quot;&amp;lt;a href=&#39;%s&#39;&amp;gt;Admin Section&amp;lt;/a&amp;gt; | \
            &amp;lt;a href=&#39;%s&#39;&amp;gt;Posts Section&amp;lt;/a&amp;gt;&amp;quot; % (url_for(&#39;admin.show&#39;),
                                               url_for(&#39;posts.show&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we&amp;rsquo;ve registered our application, test the application and you&amp;rsquo;ll see
how the blueprints have correctly registered our url endpoints.&lt;/p&gt;

&lt;p&gt;I hope this tutorial helped you in understanding what blueprints are and what
they can do. If you want to follow along, all the code for this tutorial is
available on my &lt;a href=&#34;https://github.com/prakhar1989/flask-tuts/tree/master/lesson-2&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In summary, blueprints allow us to modularize our components which can be plugged in our
app. This makes our components easy to re-use and maintain. If you&amp;rsquo;ve done
django and you&amp;rsquo;re thinking to yourself that this is how django does &lt;code&gt;apps&lt;/code&gt; then
you&amp;rsquo;re absolutely correct. The idea in both the cases is similar - to have
resuable and pluggable modular components within your application. To know more
do read the short write up on the &lt;a href=&#34;http://flask.pocoo.org/docs/blueprints/&#34;&gt;official flask documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With this we finally wrap up our topic of project structure and organization. If
you&amp;rsquo;re keen to checkout how a large app is done and see the techniques are done
I encourage you to checkout this &lt;a href=&#34;https://github.com/mitsuhiko/flask/wiki/Large-app-how-to&#34;&gt;tutorial&lt;/a&gt; on flask wiki.&lt;/p&gt;

&lt;p&gt;Next time we&amp;rsquo;ll talk about &lt;strong&gt;Class Based Views&lt;/strong&gt; in Flask. See you next time!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Flask on Nginx and Gunicorn</title>
      <link>http://192.241.186.225/articles/flask-on-nginx-and-gunicorn/</link>
      <pubDate>Fri, 07 Mar 2014 12:34:58 AST</pubDate>
      
      <guid>http://192.241.186.225/articles/flask-on-nginx-and-gunicorn/</guid>
      <description>

&lt;p&gt;Even after deploying a number of &lt;a href=&#34;http://flask.pocoo.org/&#34;&gt;Flask&lt;/a&gt; apps I always find myself googling up blog posts on how to get the trio of nginx, gunicorn and supervisor working together. Below is simple, straight, no-nonsense guide on how to deploy a flask app on a Linux server using Nginx, Gunicorn and Supervisor.&lt;/p&gt;

&lt;p&gt;A disclaimer: this guide will not tell you what these technologies are. Specifically, I will not talk about why you should use &lt;code&gt;nginx&lt;/code&gt; + &lt;code&gt;gunicorn&lt;/code&gt; instead of &lt;code&gt;apache&lt;/code&gt; + &lt;code&gt;mod_wsgi&lt;/code&gt;. There is plenty of good documentation online which already does that. This is my preferred setup for deploying flask applications and it is extremely simple to get started.&lt;/p&gt;

&lt;h3 id=&#34;setup:97e8e5fc5e66771175bb9d2622c52526&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;First off setup a virtualenv. I&amp;rsquo;m a big fan of virtualenv as it helps you keep your global system environment clean.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd flask_app
$ virtualenv flask_env
$ source flask_env/bin/activate
(flask_env)$ pip install flask &amp;amp;&amp;amp; pip install gunicorn
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;gunicorn:97e8e5fc5e66771175bb9d2622c52526&#34;&gt;Gunicorn&lt;/h3&gt;

&lt;p&gt;With that done, lets create a &lt;code&gt;bash&lt;/code&gt; file called &lt;code&gt;gunicorn_start&lt;/code&gt;. The contents of this file are below. What this basically does is sets up the virtualenv and starts the gunicorn server on &lt;code&gt;http://127.0.0.1:8000&lt;/code&gt;. Do remember to customize the variables below as per your setup.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

NAME=&amp;quot;my cool flask app&amp;quot;
FLASKDIR=/Code/flask_app
VENVDIR=/Code/flask_app/flask_env
SOCKFILE=/Code/flask_app/sock
USER=captain
GROUP=captain
NUM_WORKERS=3

echo &amp;quot;Starting $NAME&amp;quot;

# activate the virtualenv
cd $VENVDIR
source bin/activate

export PYTHONPATH=$FLASKDIR:$PYTHONPATH

# Create the run directory if it doesn&#39;t exist
RUNDIR=$(dirname $SOCKFILE)
test -d $RUNDIR || mkdir -p $RUNDIR

# Start your unicorn
exec gunicorn main:app -b 127.0.0.1:8000 \
  --name $NAME \
  --workers $NUM_WORKERS \
  --user=$USER --group=$GROUP \
  --log-level=debug \
  --bind=unix:$SOCKFILE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make sure everything is running, attempt a &lt;code&gt;sudo ./gunicorn_start&lt;/code&gt; command&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:97e8e5fc5e66771175bb9d2622c52526:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:97e8e5fc5e66771175bb9d2622c52526:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. If gunicorn starts up perfectly and doesn&amp;rsquo;t cough any errors you are good to go.&lt;/p&gt;

&lt;h3 id=&#34;nginx:97e8e5fc5e66771175bb9d2622c52526&#34;&gt;Nginx&lt;/h3&gt;

&lt;p&gt;Now that &lt;code&gt;gunicorn&lt;/code&gt; is setup properly we can now move our focus to Nginx. The configuration is quite simple to get it started. The couple of lines below simply tell Nginx to act as a reverse proxy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contents of flaskconfig&lt;/strong&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:97e8e5fc5e66771175bb9d2622c52526:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:97e8e5fc5e66771175bb9d2622c52526:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
    location / {
        proxy_pass http://127.0.0.1:8000;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To run this configuration you need to save this in &lt;code&gt;/etc/nginx/sites-available&lt;/code&gt;. Assuming your file is &lt;code&gt;flaskconfig&lt;/code&gt;, you need to create a symbolic link in the &lt;code&gt;sites-enabled&lt;/code&gt; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /etc/nginx
$ ln -s /etc/nginx/sites-available/flaskconfig /etc/nginx/sites-enabled/flaskconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To test everything is working fine, restart nginx - hopefully the server should restart without any server errors&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:97e8e5fc5e66771175bb9d2622c52526:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:97e8e5fc5e66771175bb9d2622c52526:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;. Now &lt;code&gt;cd&lt;/code&gt; into the project directory and start the &lt;code&gt;gunicorn_start&lt;/code&gt; command. Now head over to the domain name and you should see your application running.&lt;/p&gt;

&lt;h3 id=&#34;supervisor:97e8e5fc5e66771175bb9d2622c52526&#34;&gt;Supervisor&lt;/h3&gt;

&lt;p&gt;Supervisor is a client/server system that allows its users to monitor and control a number of processes on UNIX-like operating systems. In simple words, rather than manually starting and stopping &lt;code&gt;gunicorn&lt;/code&gt; you can use supervisor to create a daemon that is easy to manage. Create a new configuration file in &lt;code&gt;/etc/supervisor/conf.d&lt;/code&gt;. To manage supervisor you can use the familiar &lt;code&gt;sudo service supervisor restart&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[program:flask_app]
command = /Code/flask_app/gunicorn_start
user = root
stdout_logfile = /Code/flask_app/logs/gunicorn_supervisor.log
redirect_stderr = true
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;fabric:97e8e5fc5e66771175bb9d2622c52526&#34;&gt;Fabric&lt;/h3&gt;

&lt;p&gt;Fabric is a really cool python library that can be used for application deployment and systems administration. Using nothing but &lt;code&gt;python&lt;/code&gt; you can create deployment / automation scripts. You can have a look at a &lt;code&gt;fabfile&lt;/code&gt; I created for deploying a django application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from fabric.api import *
from contextlib import contextmanager as _contextmanager

env.user = &amp;quot;captain&amp;quot;
env.activate = &amp;quot;source /Code/flask_app/flask_env/bin/activate&amp;quot;
env.directory = &amp;quot;/Code/flask_app/&amp;quot;
env.hosts = [&amp;quot;33.33.33.33&amp;quot;]

def prepare_deploy():
    local(&amp;quot;echo ------------------------&amp;quot;)
    local(&amp;quot;echo DEPLOYING APP TO PRODUCTION&amp;quot;)
    local(&amp;quot;git add . &amp;amp;&amp;amp; git commit&amp;quot;)
    local(&amp;quot;git push -u origin master&amp;quot;)
    local(&amp;quot;echo APP PUSHED TO PRODUCTION&amp;quot;)
    local(&amp;quot;echo ------------------------&amp;quot;)

def commit(msg):
    local(&amp;quot;git add . &amp;amp;&amp;amp; git commit -am %s&amp;quot; % msg)

def deploy():
    prepare_deploy()
    with cd(env.directory):
        run(&amp;quot;git pull&amp;quot;)
    restart_service()

def restart_service():
    run(&amp;quot;sudo supervisorctl restart flask_app&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hopefully, this post has been helpful in giving you a good idea of how you can deploy flask apps on Nginx &amp;amp; Gunicorn. If you have any queries feel free to contact me.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:97e8e5fc5e66771175bb9d2622c52526:1&#34;&gt;Do remember to give the &lt;code&gt;gunicorn_start&lt;/code&gt; script the executable status with the &lt;code&gt;chmod +x gunicorn_start&lt;/code&gt; command.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:97e8e5fc5e66771175bb9d2622c52526:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:97e8e5fc5e66771175bb9d2622c52526:2&#34;&gt;For a more elaborate configuration for a production server, refer to the &lt;a href=&#34;http://gunicorn-docs.readthedocs.org/en/latest/deploy.html&#34;&gt;gunicorn documentation&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:97e8e5fc5e66771175bb9d2622c52526:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:97e8e5fc5e66771175bb9d2622c52526:3&#34;&gt;You can use &lt;code&gt;sudo nginx -t&lt;/code&gt; to identify any configuration related errors.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:97e8e5fc5e66771175bb9d2622c52526:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Class Based Views</title>
      <link>http://192.241.186.225/articles/class-based-views/</link>
      <pubDate>Thu, 09 May 2013 12:34:58 AST</pubDate>
      
      <guid>http://192.241.186.225/articles/class-based-views/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;ve used Django before, one of the things that you surely miss (apart from the django-admin, of course) is class based (or generic) views. Class based views allow you to structure your views and reuse code by harnessing inheritance and mixins. This allows you to create generic views for routine tasks and simply inherit from them for similar views.&lt;/p&gt;

&lt;p&gt;In flask 0.7 class based views were introduced which act similar to generic
views in Django. In this tutorial we&amp;rsquo;ll cover how to use class based views to
make extendable views. We&amp;rsquo;ll also see how we can use &lt;code&gt;MethodView&lt;/code&gt; (a type of
class based view) to create a RESTful API.&lt;/p&gt;

&lt;p&gt;Lets get started. I have a basic starter template that looks like this -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|-- static/
    |- jquery.js
|-- templates/
    |-- index.html
    |-- about.html
    |-- base.html
    |-- users.html
|-- main.py
|-- user.db
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since the app is only for demo purposes, I&amp;rsquo;ve added all my models and views in a
single file - &lt;code&gt;main.py&lt;/code&gt;. I have a single model called &lt;code&gt;User&lt;/code&gt; and I&amp;rsquo;ve used SQLAlchemy as the ORM. The &lt;code&gt;user.db&lt;/code&gt; file is the SQLITE db that I&amp;rsquo;m using for this app. To begin with, these are the kinds of views that our app needs to have -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There are a few views that simply need to return a template - like index and about.&lt;/li&gt;
&lt;li&gt;There are a couple of models in our application and we need to have views that display
the model data as a list by passing that data to a template.&lt;/li&gt;
&lt;li&gt;Lastly, we need to have consolidated view for making a API instead of flooding
our view with ifs&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;@app.route(&#39;/users/&#39;)
def users():
  if request.method == &amp;quot;GET&amp;quot;:
    pass
  else:
    pass  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;@app.route(&#39;/users/&amp;lt;int:post_id&amp;gt;&#39;)
def user():
  if request.method == &amp;quot;GET&amp;quot;:
    pass
  elif request.method == &amp;quot;PUT&amp;quot;:
    pass
  elif request.method == &amp;quot;DELETE&amp;quot;:
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets begin with the first requirement. Instead of just repeating code to
render a template we&amp;rsquo;ll a create class based view akin to a &lt;a href=&#34;https://docs.djangoproject.com/en/dev/ref/class-based-views/base/#django.views.generic.base.TemplateView&#34;&gt;TemplateView&lt;/a&gt; in
django&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from flask.views import View

class RenderTemplateView(View):
    def __init__(self, template_name):
        self.template_name = template_name

    def dispatch_request(self):
        return render_template(self.template_name)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we&amp;rsquo;ve done here is that we&amp;rsquo;ve just subclassed the &lt;code&gt;flask.views.View&lt;/code&gt; class
and implemented a &lt;code&gt;dispatch_request&lt;/code&gt; method. All subclasses that inherit from the
&lt;code&gt;flask.view&lt;/code&gt; class need to override this method to implement the actual view
code.&lt;/p&gt;

&lt;p&gt;This allows us to create template views like this -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# urls for rendering simple templates
app.add_url_rule(&#39;/about&#39;, view_func = RenderTemplateView.as_view(&#39;about_page&#39;, template_name=&amp;quot;about.html&amp;quot;))
app.add_url_rule(&#39;/&#39;, view_func = RenderTemplateView.as_view(&#39;index_page&#39;, template_name=&amp;quot;index.html&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first argument to the &lt;code&gt;as_view&lt;/code&gt; function is the URL endpoint and second
being the name of the template that needs to be passed.&lt;/p&gt;

&lt;p&gt;With that out of way, lets jump to the second requirement - building a listview.
Now in my app, I just have one model but in apps where there are lots of models
and you find yourself repeatedly implementing a view that returns a list of the
objects of that model which is then passed to a template, you can implement your
listview class. Lets see how that is done -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class ListView(View):
    def get_template_name(self):
        raise NotImplementedError()

    def render_template(self, context):
        # a custom render_template method that passes in the 
        # template name and the modified template context
        return render_template(self.get_template_name(), **context)

    def dispatch_request(self):
        # self.get_context returns a modified context which is
        # then passed to our render_template method
        context = self.get_context()
        return self.render_template(context)

# subclass from the listview class
class UserListView(ListView):
    def get_template_name(self):
        return &amp;quot;users.html&amp;quot;

    def get_context(self):
        context = {&#39;objects&#39;: User.query.all(), &#39;time&#39;: datetime.now()}
        return context

# urls for list views
app.add_url_rule(&#39;/userlist/&#39;, view_func = UserListView.as_view(&#39;user_list&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The idea here is similar. We implmenent a custom &lt;code&gt;render_template&lt;/code&gt; function so
that we can pass in a custom context to the template. This pattern can then be
easily extended for multiple models.&lt;/p&gt;

&lt;p&gt;Lastly, lets see how we can use &lt;code&gt;MethodView&lt;/code&gt; to make a RESTful API. &lt;code&gt;MethodView&lt;/code&gt;
allows us to manage method-based dispatching like so -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from flask.views import MethodView
class UserAPI(MethodView):
    def get(self, user_id):
        if user_id is None:
            users = User.query.all()
            json_results = [{&#39;name&#39;: u.name, &#39;age&#39;: u.age} for u in users]
        else:
            user = User.query.get_or_404(user_id)
            json_results = [{&#39;name&#39;: user.name, &#39;age&#39;: user.age}]
        return jsonify(item=json_results)

    def post(self):
      pass

    def delete(self, user_id):
      pass

    def put(self, user_id):
      pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, each HTTP method maps to a function with the same name. This way
you dont have to provide separate &lt;code&gt;method&lt;/code&gt; attribute as its automagically
deciphered from the title of the method.&lt;/p&gt;

&lt;p&gt;To hook this up to a routing system we just provides multiple routes to the same
view like this -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# urls for User API
user_api_view = UserAPI.as_view(&#39;user_api&#39;)
app.add_url_rule(&#39;/users/&#39;, defaults={&#39;user_id&#39;: None},
                 view_func = user_api_view, methods=[&amp;quot;GET&amp;quot;,])
app.add_url_rule(&#39;/users/&#39;, view_func = user_api_view, methods=[&amp;quot;POST&amp;quot;,])
app.add_url_rule(&#39;/users/&amp;lt;int:user_id&amp;gt;&#39;, view_func = user_api_view,
                 methods=[&amp;quot;GET&amp;quot;, &amp;quot;PUT&amp;quot;, &amp;quot;DELETE&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;ve been following along you can check the code on my &lt;a href=&#34;https://github.com/prakhar1989/flask-tuts/tree/master/lesson-3&#34;&gt;github&lt;/a&gt; which contains a working API and accompanying jquery ajax calls for testing the API for your reference.&lt;/p&gt;

&lt;p&gt;I hope this tutorial has helped you in understanding when you use class based
views. Basically, whenever you see yourself repeating view functionality you
know that its time for a class based view. Don&amp;rsquo;t forget to refer to the
&lt;a href=&#34;http://flask.pocoo.org/docs/views/&#34;&gt;official docs&lt;/a&gt; to get a clearer picture.&lt;/p&gt;

&lt;p&gt;See you next time!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Application Structure</title>
      <link>http://192.241.186.225/articles/application-structure/</link>
      <pubDate>Tue, 07 May 2013 12:34:58 AST</pubDate>
      
      <guid>http://192.241.186.225/articles/application-structure/</guid>
      <description>

&lt;p&gt;In this post, we&amp;rsquo;re going to talk about a seemingly easy but an important topic - organizing and structuring your flask applications.&lt;/p&gt;

&lt;p&gt;As mentioned earlier, getting started with flask is super easy. Unlike django, flask doesn&amp;rsquo;t follow a directory structure when you start a new app. Flask will not complain even if all of your code resides in a single &lt;code&gt;main.py&lt;/code&gt; file. But we all know that that is not the way to go. Having all your code in one file makes it messy and unmaintainable.&lt;/p&gt;

&lt;p&gt;Lets assume that you&amp;rsquo;ve gone through the throughly explained &lt;a href=&#34;http://flask.pocoo.org/docs/tutorial/&#34;&gt;flaskr tutorial&lt;/a&gt; (which you definitely should in case you haven&amp;rsquo;t) and unable to contain the excitement you start a new flask app. As you keep writing more code and see it working you start getting that nice feeling about the awesomeness of flask. However, as your code keeps growing and since its all in a single file you start getting frustrated. Configurations, models, views etc. should definitely go in separate files, you think, so that your application is kept modular. But where do you start?&lt;/p&gt;

&lt;p&gt;This post will provide you an answer and show you a good way of structuring your apps. For starters, the flask &lt;a href=&#34;http://flask.pocoo.org/docs/patterns/packages/&#34;&gt;patterns site&lt;/a&gt; provides an easy-to-follow tutorial for structuring an app. This post will cover that and will go beyond by covering configuration module and an extension called &lt;a href=&#34;http://flask-script.readthedocs.org/en/latest/&#34;&gt;flask-script&lt;/a&gt;. Lets get started!&lt;/p&gt;

&lt;h3 id=&#34;packages:116daa917c1b6b0be75648eef414a7bf&#34;&gt;Packages&lt;/h3&gt;

&lt;p&gt;For larger applications going the packages way is generally a good idea.  A small app might look like this -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- myapp
  |- static
  |- templates
  |- main.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To change this into a python module all you need to do is move the files in a separate folder and create a new file ( or rename the existing &lt;code&gt;main.py&lt;/code&gt; ) &lt;code&gt;__init__.py&lt;/code&gt; so that python can interpret the folder as a module. After re-structuring your app will look like this -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- myapp
  |- hello
    |-- __init__.py
    |-- static
    |-- templates
    |-- main.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step is to separate app initialization, models and views declaration from your &lt;code&gt;__init__.py&lt;/code&gt;. To do that write the following code in your &lt;code&gt;__init__.py&lt;/code&gt;. Note: I&amp;rsquo;m assuming that you&amp;rsquo;re assuming sqlalchemy as your ORM. Additionally, I&amp;rsquo;ve used hello as the name of the app folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# flask imports go here
from flask import Flask
from flask.ext.sqlalchemy import SQLAlchemy
import os

# declaring the app
app = Flask(__name__)

# get the base dir
base_dir = os.path.dirname(os.path.abspath(__file__))
app.config.from_pyfile(os.path.join(base_dir, &#39;../app.cfg&#39;))

# create db
db = SQLAlchemy(app)

# importing views
import hello.views

# import models
from hello.models.person import Person
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this code, you&amp;rsquo;ll notice that &lt;code&gt;hello.views&lt;/code&gt;, &lt;code&gt;hello.models.person&lt;/code&gt; and &lt;code&gt;app.cfg&lt;/code&gt; are missing files. Don&amp;rsquo;t worry, we&amp;rsquo;ll create them soon. The rest of the code is self-explainatory. We get the base directory so that we can easily reference the config file to instantiate our app.&lt;/p&gt;

&lt;h3 id=&#34;application-configuration:116daa917c1b6b0be75648eef414a7bf&#34;&gt;Application Configuration&lt;/h3&gt;

&lt;p&gt;The next step is to create the missing files. In your app (in my case -
hello) folder, create a new folder called &lt;code&gt;models&lt;/code&gt; and add your models
(either separately or all in single file).  Dont forget to create a
blank &lt;code&gt;__init__.py&lt;/code&gt; file in this folder as well. Next, create a file
called &lt;code&gt;app.cfg&lt;/code&gt; to store your configuration. This file should reside
alongside your app (or hello) folder. Finally, inside your app (or
hello) folder add all your views in a file &lt;code&gt;views.py&lt;/code&gt;. Below is a sample
excerpt of how your files should look like.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# sample app.cfg
DEBUG = True
SECRET= &amp;quot;mysupersecretkey&amp;quot;

# dummy model inside models folder
# filename hello/models/dummy.py
from hello import db
class Dummy(db.Model):
  pass

# views inside hello/views.py
from hello import app
from hello.models.dummy import Dummy
from flask import render_template
@app.route(&#39;/&#39;)
def hello():
  return render_template(&#39;index.html&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this stage this is how your structure looks like -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- myapp
  |- app.cfg
  |- hello
    |-- __init__.py
    |-- static/
    |-- templates/
    |-- views.py
    |-- models/
      |--- __init__.py
      |--- dummy.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;ve noticed we still haven&amp;rsquo;t told our app to run. To do that, create
a new file called &lt;code&gt;manage.py&lt;/code&gt; alongside &lt;code&gt;app.cfg&lt;/code&gt; and enter the
following code -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from hello import app
from hello import db

if __name__ == &amp;quot;__main__&amp;quot;:
  app.run()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that you have everything setup, your app should work. Give it a go by running &lt;code&gt;python manage.py&lt;/code&gt;
and make sure there aren&amp;rsquo;t any import errors.&lt;/p&gt;

&lt;h3 id=&#34;flask-script:116daa917c1b6b0be75648eef414a7bf&#34;&gt;Flask Script&lt;/h3&gt;

&lt;p&gt;One last thing I need to introduce before we wrap up is a flask extension called
&lt;a href=&#34;http://flask-script.readthedocs.org/en/latest/&#34;&gt;flask-script&lt;/a&gt;. The
flask-script extensions provides support for writing scripts and makes
it super easy to add commands that can runserver, open shell, manage
cronjobs and other things right from the terminal. The documentation for
the extension is very easy to follow and I encourage you to give it a
read. I&amp;rsquo;ve edited the &lt;code&gt;manage.py&lt;/code&gt; file and added support for
flask-script.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from flask.ext.script import Manager, Server, Shell
from hello import app
from hello import db

# (optional) - include models if you want to!
import hello.models as models

def _make_context():
  &amp;quot;&amp;quot;&amp;quot; context for passing into to the shell command &amp;quot;&amp;quot;&amp;quot;
  return dict(app=app, db=db, models=models)

# set manager
manager = Manager(app)

# add commands
manager.add_command(&amp;quot;runserver&amp;quot;, Server())
manager.add_command(&amp;quot;shell&amp;quot;, Shell(make_context = _make_context))

if __name__ == &amp;quot;__main__&amp;quot;:
  manager.run()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After making these changes, simply run &lt;code&gt;python manage.py runserver&lt;/code&gt; to
run the app and &lt;code&gt;python manage.py shell&lt;/code&gt; to jump into a python shell
with your application context, db and models loaded!&lt;/p&gt;

&lt;p&gt;I hope this has been a fun tutorial for you to follow. If there are any
issues feel free to email me.&lt;/p&gt;

&lt;p&gt;The code for this lesson is available on my &lt;a href=&#34;https://github.com/prakhar1989/flask-tuts/tree/master/lesson-1/hello&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next post we&amp;rsquo;re going to delve further into the topic of project structure by taking a look at &lt;strong&gt;blueprints in Flask&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;See you next time!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Beginning Flask</title>
      <link>http://192.241.186.225/articles/beginning-flask/</link>
      <pubDate>Mon, 06 May 2013 12:34:58 AST</pubDate>
      
      <guid>http://192.241.186.225/articles/beginning-flask/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been meaning to start a write a series on &lt;a href=&#34;http://flask.pooco.org&#34;&gt;Flask&lt;/a&gt; which is a micro-framework for developing web applications in python. In Ruby parlance, flask is to &lt;a href=&#34;http://www.sinatrarb.com/&#34;&gt;Sinatra&lt;/a&gt; what Django is to Rails.&lt;/p&gt;

&lt;p&gt;The nicest thing (and most confusing for beginners) about Flask is that its quite barebones on the onset. A simple &lt;code&gt;hello world&lt;/code&gt; application in Flask is just about 7 lines as shown below. However, going from hello world to full fledged application is a daunting task in itself for a beginner.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from flask import Flask
app = Flask(__name__)
@app.route(&#39;/&#39;)
def hello():
  return &amp;quot;hello world&amp;quot;
if __name__ == &amp;quot;__main__&amp;quot;:
  app.run()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Almost all of the material found in this guide will be available from other sources namely flask&amp;rsquo;s excellent documentation and the countless flask projects on Github. However, I&amp;rsquo;ll try my best to write a comprehensive post on each topic for that day the matter for which will be collected through the flask docs, projects on github and the mailing list.&lt;/p&gt;

&lt;p&gt;As a disclaimer: I&amp;rsquo;m new to flask myself and I&amp;rsquo;m constantly learning. While building a couple of apps in flask I&amp;rsquo;ve found myself stumbling on a few aspects like project organization, ORM and deployment very frequently. Having a lot of choices at your disposal might not always be best for productivity. Through this guide, I aim to help you in making the right choices by sharing the best practices involved in building flask apps.&lt;/p&gt;

&lt;p&gt;The idea is to write on a topic each day, detailed with code examples
and references for further reading. To get the most out of each post, it
is expected that you&amp;rsquo;ll type out the code for yourself. The best way to
learn is by doing.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll start the series with &lt;strong&gt;Project Structure and Organization&lt;/strong&gt;. See you next time!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>