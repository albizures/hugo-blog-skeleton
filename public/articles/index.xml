<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on cat /dev/random</title>
    <link>http://192.241.186.225/articles/</link>
    <description>Recent content in Articles on cat /dev/random</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    
    <lastBuildDate>Mon, 01 Dec 2014 12:34:58 AST</lastBuildDate>
    <atom:link href="http://192.241.186.225/articles/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Mining of Massive DataSets - A Review</title>
      <link>http://192.241.186.225/articles/mining-of-massive-datasets---a-review/</link>
      <pubDate>Mon, 01 Dec 2014 12:34:58 AST</pubDate>
      
      <guid>http://192.241.186.225/articles/mining-of-massive-datasets---a-review/</guid>
      <description>

&lt;p&gt;If you&amp;rsquo;ve been keeping track, I&amp;rsquo;ve hardly published a single article in the last month. In my defense, the last 7 months have been extremely hectic. High work pressure and a rather dense online course kept most of the drafts from seeing the light of day. Before I jump in reviewing the course i.e. &lt;a href=&#34;https://www.coursera.org/course/mmds&#34;&gt;Mining Massive DataSets (MMDS)&lt;/a&gt;, here&amp;rsquo;s a quick short story for some context.&lt;/p&gt;

&lt;p&gt;I first stumbled onto MMDS or &lt;a href=&#34;http://mmds.org/&#34;&gt;CS246&lt;/a&gt; (as its called in Stanford), a graduate level course on (you guessed it) data mining in early 2012 when I had recently finished Andrew Ng&amp;rsquo;s course on Machine Learning. With professors like Anand Rajaraman (of Amazon) and Jeff Ullman teaching the course and making their book freely available, I got quite interested and wished that it be offered on Coursera some day. Fast forward 2 years and I see a mail from Coursera informing me that the course is up for grabs. Without hesitating, I hurriedly signed up and waited eagerly for the course to start.&lt;/p&gt;

&lt;p&gt;The course lasted for around 8 weeks comprising of long lectures, quizzes and a final exam which I gave just a couple of days back. MMDS came on HN where I also posted a similar review. I&amp;rsquo;m reposting it here with minor changes. For the impatient ones a TL;DR -&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you&amp;rsquo;re interested in Machine Learning and Data Mining and want to learn with what kind of challenges are posed by huge datasets in applying standard algorithms, then you&amp;rsquo;ll find this course extremely valuable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the rest of you, here&amp;rsquo;s a bit more detailed out set of pros and cons.&lt;/p&gt;

&lt;h2 id=&#34;pros:61d6eae03e4f24448d625cdc6f6abc5e&#34;&gt;Pros&lt;/h2&gt;

&lt;h3 id=&#34;faculty:61d6eae03e4f24448d625cdc6f6abc5e&#34;&gt;Faculty&lt;/h3&gt;

&lt;p&gt;Like most MOOCs, MMDS is taught by one of the best faculty from the field. I&amp;rsquo;ve been an avid follower of Anand Rajaraman&amp;rsquo;s &lt;a href=&#34;http://anand.typepad.com/datawocky/&#34;&gt;blog&lt;/a&gt; before I joined this course and I have to say the enthusiasm of the faculty is infectious and their expertise with the material is markedly evident.&lt;/p&gt;

&lt;h3 id=&#34;difficulty:61d6eae03e4f24448d625cdc6f6abc5e&#34;&gt;Difficulty&lt;/h3&gt;

&lt;p&gt;MMDS is a CS graduate level course (CS246) from Stanford. That means the topics are not trivial, the lectures are dense and you as a student are expected to invest significant time into understanding the material. On average I spent around 6-8 hours per week on the lectures and quizzes. Since this is hard, grasping the concepts and getting the quiz right is quite gratifying. There&amp;rsquo;s also an advanced section for students who want to challenge themselves more. As an incentive, a certificate of achievement with distinction is awarded to these students.&lt;/p&gt;

&lt;h3 id=&#34;material:61d6eae03e4f24448d625cdc6f6abc5e&#34;&gt;Material&lt;/h3&gt;

&lt;p&gt;The syllabus and the topics covered in this blog are extremely relevant for any one aspiring to work in the data mining / machine learning field. Having done Andrew Ng&amp;rsquo;s ML course, this course acts a perfect supplement and covers a lot of practical aspects of implementing the algorithms when applied to massive data sets. For example, a recent lecture talked about how the &lt;a href=&#34;http://www.dmi.unict.it/~apulvirenti/agd/BFR98.pdf&#34;&gt;BFR algorithm&lt;/a&gt; for finding clusters works better than k-means for a very large dataset.&lt;/p&gt;

&lt;h3 id=&#34;book:61d6eae03e4f24448d625cdc6f6abc5e&#34;&gt;Book&lt;/h3&gt;

&lt;p&gt;The accompanying MMDS book is just awesome and the lectures build upon the content and examples from it. For someone who finds the book a bit too challenging (probably because your math is a bit rusty) the lectures make the material quite approachable.&lt;/p&gt;

&lt;h3 id=&#34;final-exam:61d6eae03e4f24448d625cdc6f6abc5e&#34;&gt;Final Exam&lt;/h3&gt;

&lt;p&gt;This was my first course where there was a final exam and in my opinion it made the experience more rewarding. Two exams of 3 hours and 2 hours did take a toll but revising the content at the end helped build a mental model of the concepts and grasp the big picture better, all of which at the end of the day made the learning experience more rewarding and fruitful.&lt;/p&gt;

&lt;h2 id=&#34;cons:61d6eae03e4f24448d625cdc6f6abc5e&#34;&gt;Cons&lt;/h2&gt;

&lt;h3 id=&#34;theoretical:61d6eae03e4f24448d625cdc6f6abc5e&#34;&gt;Theoretical&lt;/h3&gt;

&lt;p&gt;The course is primarily theoretical in both its presentation and exercises. This is not to say that algorithms are presented without examples, but that the examples (and the quizzes even more so) are trivial and do not do a great job in illustrating the issues with implementing or applying various algorithms in real-life datasets.&lt;/p&gt;

&lt;h3 id=&#34;programming-assignments:61d6eae03e4f24448d625cdc6f6abc5e&#34;&gt;Programming Assignments&lt;/h3&gt;

&lt;p&gt;In sharp contrast to Andrew Ng&amp;rsquo;s course, there are no compulsory programming assignments. The exercises are all quizzes which check how well you have understood the concepts. There is just one programming assignment which is also optional.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:61d6eae03e4f24448d625cdc6f6abc5e&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Overall, I&amp;rsquo;m really glad I did this course. The professors emphasize citing industry examples wherever necessary (the PageRank algorithm and accompanying Google&amp;rsquo;s implementation was covered for 3 lectures), which is a welcome change from other CS courses. Along with the book, I believe the course is a wonderful primer to the field of Data Mining.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Demystifying Decorators</title>
      <link>http://192.241.186.225/articles/demistifying-decorators/</link>
      <pubDate>Mon, 03 Nov 2014 12:34:58 AST</pubDate>
      
      <guid>http://192.241.186.225/articles/demistifying-decorators/</guid>
      <description>

&lt;p&gt;If you&amp;rsquo;ve been programming in Python for some time chances are you have come across decorators. Even though you might not know what decorators are and how they work, you&amp;rsquo;ve surely used them as most of popular Python libraries use decorators (the familiar &lt;code&gt;@&lt;/code&gt; syntax) to make beautiful APIs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://flask.pocoo.org/&#34;&gt;Flask&lt;/a&gt;, for example, exposes decorators for setting routes. &lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;Django&lt;/a&gt; has a familiar &lt;code&gt;login_required&lt;/code&gt; decorator that allows the user to force authentication for a view.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Flask Example
@app.route(&#39;/&#39;) # a decorator
def main():
    return render_template(&#39;index.html&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# Django Example
from django.contrib.auth.decorators import login_required

@login_required # a decorator
def my_view(request):
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What are &lt;strong&gt;decorators&lt;/strong&gt;? Quite simply,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Decorators are &lt;a href=&#34;http://en.wikipedia.org/wiki/Syntactic_sugar&#34;&gt;syntatic sugar&lt;/a&gt; for executing code before and after the function you decorate&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quite a few articles have been written about decorators for beginner and experienced programmers alike. However, what I&amp;rsquo;ve found generally missing is they are littered with fake examples that are hard to relate to. As a result, although you do understand decorators conceptually, its hard to use that knowledge into your next program.&lt;/p&gt;

&lt;p&gt;In this blog post, I intend that cover a very realistic example that I encountered while recently working on a project at my workplace. Hopefully, this will help you understand on how decorators can be used to design more intuitive abstractions in fewer lines of code.&lt;/p&gt;

&lt;h3 id=&#34;the-problem:a8729dfc7d8d6429c71315b7183203ea&#34;&gt;The Problem&lt;/h3&gt;

&lt;p&gt;Well lets just say that you are required to make a CRUD app. You are required to just query the database and show the results on a webpage. But this time, you are not allowed to use an ORM as your boss hates everything that has a 3-letter acronym. Your only option now is to write plain-old SQL&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a8729dfc7d8d6429c71315b7183203ea:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a8729dfc7d8d6429c71315b7183203ea:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; to build this app.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve been not spoiled by using ORM you&amp;rsquo;d remember that too query a DB you need to do the following&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get a connection to the DB&lt;/li&gt;
&lt;li&gt;Request for a reference to a cursor from the DB object&lt;/li&gt;
&lt;li&gt;Execute the SQL on the cursor reference&lt;/li&gt;
&lt;li&gt;For a &lt;code&gt;READ&lt;/code&gt;- Fetch the results from the cursor&lt;/li&gt;
&lt;li&gt;For a &lt;code&gt;WRITE&lt;/code&gt;- Commit the transaction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that in mind, this is how my db functions looked like -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from MySQL.db.cursor import DictCursor

def get_deals(id):
    db = get_db()
    c = db.cursor(DictCursor)
    c.execute(&amp;quot;select id, deal, duedate from deals where id = &#39;%s&#39;&amp;quot; % (id, ))
    results = c.fetchall()
    return results

def get_account(account):
    db = get_db()
    c = db.cursor(DictCursor)
    c.execute(&amp;quot;select name, account from accounts where id = &#39;%s&#39;&amp;quot; % (account,))
    result = c.fetchone()
    return result
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As evident from above, I had to write quite a few functions for every query that I wanted to fire on the database. For demonstration, the queries shown above are quite simple, in reality, I had to write a query spanning multiple joins so that there&amp;rsquo;s just one query fired for every page load.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m sure the problem is clearly evident. Duplicating code across a number of functions is quite problematic. Right off your head, you are thinking that this can be solved by declaring a simple wrapper function but if you look closely, doing anything fancy with the results or customizing the query will not be flexible.&lt;/p&gt;

&lt;h3 id=&#34;decorators:a8729dfc7d8d6429c71315b7183203ea&#34;&gt;Decorators&lt;/h3&gt;

&lt;p&gt;Lets see how we can use decorators to remove the code duplication while ensuring flexibility.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a8729dfc7d8d6429c71315b7183203ea:1&#34;&gt;You see what I did there?
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a8729dfc7d8d6429c71315b7183203ea:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Bloom Filters for Dummies</title>
      <link>http://192.241.186.225/articles/bloom-filters-for-dummies/</link>
      <pubDate>Sun, 19 Oct 2014 12:34:58 AST</pubDate>
      
      <guid>http://192.241.186.225/articles/bloom-filters-for-dummies/</guid>
      <description>

&lt;p&gt;Bloom Filters is one of those data structures that you don&amp;rsquo;t generally learn about in a typical data structures 101 class, but wish you had learnt once you know about them. Despite reading several articles on bloom filters I was still finding it hard to grasp the concepts until the last week when I decided to sit down and not get up until I get the hang of it. Below is an article where I attempt to explain what I understood in a clear way (hopefully) so that others can learn.&lt;/p&gt;

&lt;h3 id=&#34;a-use-case:d5d8a5425bd3ed6bd548c6538f6ba3fb&#34;&gt;A Use Case&lt;/h3&gt;

&lt;p&gt;Before we talk about what a Bloom Filter is and how it actually works let me make an attempt to sell you on why you would need a bloom filter. Let&amp;rsquo;s assume you have an idea to build your own search engine. You are fed up of Google&amp;rsquo;s monopoly and decide to write your own version of a search engine (much like &lt;a href=&#34;http://duckduckgo.com&#34;&gt;DuckDuckGo&lt;/a&gt;). Now the first step in building a search engine is to build a crawler. How does a crawler work? Quite simply the work of crawler can be reduced down to the following steps (without the implementation details, of course)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start with a URL (webpage) and scrape its content.&lt;/li&gt;
&lt;li&gt;Extract a list of all URLs on that page.&lt;/li&gt;
&lt;li&gt;For each URL on that page check if this URL has not been crawled already.&lt;/li&gt;
&lt;li&gt;Take the new URL that you encounter and go to Step 1.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can see, a crawler&amp;rsquo;s work in theory is quite simple - just keep scraping content for any previously unseen URLs (webpages). The step we are going to focus on is step 3 in the above algorithm. If you&amp;rsquo;ve taken your data structures class you know that to maintain a list of all URLs to check for membership is a bad idea (&lt;code&gt;O(n)&lt;/code&gt; lookup time). So what you instead do is a use a set (or a hash-table) in memory that allows you do quick lookups and test for membership of a URL. Now this works fine as long as your hash-table can reside in the memory. Consider the case for Google for example - clearly there is no way a hash table for a billion plus URLs can reside in main memory. You can surely use the disk for storing and querying but since that is significantly slower compared to accessing the main memory we are not going to consider that case for now.&lt;/p&gt;

&lt;h3 id=&#34;bloom-filters:d5d8a5425bd3ed6bd548c6538f6ba3fb&#34;&gt;Bloom Filters&lt;/h3&gt;

&lt;p&gt;How do you tackle the above situation? Is there a data structure that can be stored in main memory and still hold vast amount of data? This is where bloom filters come in. Bloom filters use much lesser space and constant time to answer the queries for set membership. More precisely&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A Bloom filter is a data structure that is used to check for membership of an element &lt;code&gt;x&lt;/code&gt; in a set of &lt;code&gt;m&lt;/code&gt; elements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bloom filters have a strong space advantage over other data structures like sets, hash tables or binary search trees. Bloom filters also have the property that the time taken to add an item or to check for membership is a constant &lt;code&gt;O(k)&lt;/code&gt; and is independent of the number of items in the filter.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s the catch you might ask? Well, the catch is that bloom filters trade exactness for this efficiency meaning that there are false-positives - i.e. elements that are not a part of set but are claimed to be part of the set. However, as we shall soon see, the rate of false positives depends upon the application and can be lowered at the expense of  amount of memory required. Like everything else in computer science, there is a trade-off and in this case, between exactness and amount of memory.&lt;/p&gt;

&lt;h3 id=&#34;algorithm:d5d8a5425bd3ed6bd548c6538f6ba3fb&#34;&gt;Algorithm&lt;/h3&gt;

&lt;p&gt;At the heart of every bloom filter lies two key elements&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An array of &lt;code&gt;n&lt;/code&gt; bits, initially all set to &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A collection of &lt;code&gt;k&lt;/code&gt; independent hash functions &lt;code&gt;h(x)&lt;/code&gt;. Each hash function takes a value &lt;code&gt;v&lt;/code&gt; and generates a number &lt;code&gt;i&lt;/code&gt; where &lt;code&gt;i &amp;lt; n&lt;/code&gt; which effectively maps to a position in the bit array.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The underlying idea of a bloom filter is quite simple and can be explained in the following steps -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Initialize a bit array of &lt;code&gt;n&lt;/code&gt; bits with zeros. Generally &lt;code&gt;n&lt;/code&gt; is chosen to be much greater than the number of elements in the set.&lt;/li&gt;
&lt;li&gt;Whenever the filter sees a new element apply each of the hash functions &lt;code&gt;h(x)&lt;/code&gt; on the element. With the value generated, which is an index in the bit array, set the bit to 1 in the array. For example, if there are &lt;code&gt;k&lt;/code&gt; hash functions there will be &lt;code&gt;k&lt;/code&gt; indices generated. For each of these &lt;code&gt;k&lt;/code&gt; positions in the bit array set &lt;code&gt;array[i] = 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To check if an element exists in the set, simply carry out the exact same procedure with a slight twist. Generate &lt;code&gt;k&lt;/code&gt; values by applying the &lt;code&gt;k&lt;/code&gt; hash-functions on the input. If &lt;strong&gt;at least&lt;/strong&gt; one of these &lt;code&gt;k&lt;/code&gt; indices in the bit array is set to zero then the element is a new element else this is an existing element in the set.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;example:d5d8a5425bd3ed6bd548c6538f6ba3fb&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;Lets just jump to an example&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:d5d8a5425bd3ed6bd548c6538f6ba3fb:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:d5d8a5425bd3ed6bd548c6538f6ba3fb:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. We start by defining the hash functions. To keep the example simple, we&amp;rsquo;ll use two hash functions &lt;code&gt;h(x)&lt;/code&gt; and &lt;code&gt;g(x)&lt;/code&gt;. This is how these work for an integer &lt;code&gt;x&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;h(x)&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Convert &lt;code&gt;x&lt;/code&gt; to its binary equivalent. Lets call it &lt;code&gt;b&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Take the odd numbered bits in &lt;code&gt;b&lt;/code&gt; and generate a new number &lt;code&gt;y&lt;/code&gt; with these bits.&lt;/li&gt;
&lt;li&gt;Return the value of &lt;code&gt;y modulo 11&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;g(x)&lt;/code&gt; is same as &lt;code&gt;h(x)&lt;/code&gt;, the only difference being that instead of taking the odd numbered bits we take the even numbered bits.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Quick example&lt;/em&gt;: Let &lt;code&gt;x = 25&lt;/code&gt;. Then &lt;code&gt;b = 11001&lt;/code&gt;. Taking every odd bit gives us a binary number &lt;code&gt;101&lt;/code&gt; which is binary for &lt;code&gt;5&lt;/code&gt;. Similarly taking every even bit gives us &lt;code&gt;10&lt;/code&gt; which is binary for &lt;code&gt;2&lt;/code&gt;. Hence &lt;code&gt;h(x) = 5 % 11 = 5&lt;/code&gt; and &lt;code&gt;g(x) = 2 % 11 = 2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a simple implementation in Python for the hash functions defined above.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def h(x):
    return int(&amp;quot;&amp;quot;.join([v for i, v in enumerate(bin(x)[2:]) if i % 2 == 0]), 2) % 11

def g(x):
    return int(&amp;quot;&amp;quot;.join([v for i, v in enumerate(bin(x)[2:]) if i % 2 == 1]), 2) % 11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With that out of the way lets proceed with our filter. Assume our bit array has &lt;code&gt;11&lt;/code&gt; bits, all of which are initially set to zero - &lt;code&gt;00000000000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let the first number that our bloom filter sees be &lt;code&gt;25&lt;/code&gt;. As shown above, the value of &lt;code&gt;h(25) = 5&lt;/code&gt; and &lt;code&gt;g(25) = 2&lt;/code&gt;. Hence the next step is to set the &lt;code&gt;5th&lt;/code&gt; and the &lt;code&gt;2nd&lt;/code&gt; position in our bit array to &lt;code&gt;1&lt;/code&gt;. Doing that our bit array now transforms to &lt;code&gt;00100100000&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Endianness&#34;&gt;big endian&lt;/a&gt; mode).&lt;/p&gt;

&lt;p&gt;Extending the same logic for different values of &lt;code&gt;x&lt;/code&gt; we get the table shown below.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;x&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;b&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;h(x)&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;g(x)&lt;/code&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;Bit array&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;25&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0000011001&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;00100100000&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;159&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0010011111&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;7&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;10100101000&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;585&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1001001001&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;7&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;9&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;10100101010&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This can be verified by using the functions defined above -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;map(lambda x: (h(x), g(x)), (25, 159, 585))
# [(5, 2), (0, 7), (7, 9)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As its quite clear, the bit array now becomes &lt;code&gt;10100101010&lt;/code&gt;. How about lookups? Lets say that the new value that comes to our filter is&lt;code&gt;118&lt;/code&gt;. We compute &lt;code&gt;h(118)&lt;/code&gt; and &lt;code&gt;g(118)&lt;/code&gt; and find these values to be &lt;code&gt;5&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; respectively. The next thing we do is the check in value of the bit array at these indices and find that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;array[5] = 1
array[3] = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since one of the bit is set to 0 our bloom filter reports that this the number &lt;code&gt;118&lt;/code&gt; is not an existing member in our set.&lt;/p&gt;

&lt;h3 id=&#34;false-positives:d5d8a5425bd3ed6bd548c6538f6ba3fb&#34;&gt;False Positives&lt;/h3&gt;

&lt;p&gt;Getting back to the caveat that was pointed out earlier - let me use an example to demonstrate how the bloom filter is susceptible to false positives.&lt;/p&gt;

&lt;p&gt;Assume the next value that comes to our filter is &lt;code&gt;162&lt;/code&gt;. Calculating the hash functions we find that &lt;code&gt;h(162)&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;g(162)&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;. Looking for the values in our bit array we find that both of these indices are set to &lt;code&gt;1&lt;/code&gt;. Hence, in this case the bloom filter will wrongly report that the value &lt;code&gt;162&lt;/code&gt; exists in our set.&lt;/p&gt;

&lt;h3 id=&#34;performance:d5d8a5425bd3ed6bd548c6538f6ba3fb&#34;&gt;Performance&lt;/h3&gt;

&lt;p&gt;If after reading the above you are thinking to yourself that we just need to reduce the number of collisions to reduce the rate of false positives then you are right. A simple improvement in the above example is to use more hash functions and have a large bit array. If instead of 11 bits we had 100 bits and instead of just 2 hash functions &lt;code&gt;h(x)&lt;/code&gt; and &lt;code&gt;g(x)&lt;/code&gt; we had a few more, the probability that a non-existing value to hash to all the set bits would have reduced, thereby, reducing the rate of false positives.&lt;/p&gt;

&lt;h4 id=&#34;a-numerical-example:d5d8a5425bd3ed6bd548c6538f6ba3fb&#34;&gt;A numerical example&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s do some math to corroborate our intuition above. If you feel the above statement is intuitive enough feel free to skip this section.&lt;/p&gt;

&lt;p&gt;From the example in the previous section it will be clear that a false positive arrives whenever all the positions output by the &lt;code&gt;k&lt;/code&gt; hash functions. Hence we can say that, the probability of a false positive depends on the density of &lt;code&gt;1&lt;/code&gt;s in the array and the number of hash functions. More the number of &lt;code&gt;1s&lt;/code&gt; the higher the probability of a false positive. Likewise, fewer the hash functions, higher the probability of a collision.&lt;/p&gt;

&lt;p&gt;Also, roughly we can say the following about the number of ones -&lt;/p&gt;

&lt;p&gt;{% highlight text %}
number of 1s = (no. of elements x no. of hash functions) - collisions.
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;From the above example, we have &lt;code&gt;3&lt;/code&gt; input elements and &lt;code&gt;2&lt;/code&gt; hash functions. Hence there should be &lt;code&gt;6&lt;/code&gt; bits set to 1. Since we have one collision &lt;code&gt;g(117) == h(585)&lt;/code&gt; therefore the total number of bits set in our bit array is &lt;code&gt;5&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Lastly, considering an analogy to darts and targets, we can say that for &lt;code&gt;d&lt;/code&gt; darts and &lt;code&gt;t&lt;/code&gt; targets, we can prove that the probability that no darts hit the target is &lt;code&gt;e^(-d/t)&lt;/code&gt; where &lt;code&gt;e&lt;/code&gt; is the base of natural logarithm&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:d5d8a5425bd3ed6bd548c6538f6ba3fb:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:d5d8a5425bd3ed6bd548c6538f6ba3fb:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. In our case, the targets are the bits in the array and the darts are the outputs of the hash-functions.&lt;/p&gt;

&lt;p&gt;Okay, now we are ready for the example. Assume we have a bit array of 1 billion bits, 5 hash functions and 100 million elements. That is&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;t = 10^9 (bits in the array are the targets)
d = 5 x 10^8 (outputs from the hash functions are the darts)
P(no dart hits the target) = e^(-d/t) = e^(-0.5) = 0.607
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hence the density of &lt;code&gt;0s&lt;/code&gt; in the bit array = &lt;code&gt;0.607&lt;/code&gt; or density of &lt;code&gt;1s&lt;/code&gt; in the bit array = &lt;code&gt;0.393&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The probability of a false positive = Probablity of all 5 hash functions to a index that has 1 in the bit array = &lt;code&gt;0.393^5 = 0.00937&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As seen above, the P(false positive) is indeed less. By tweaking the number of hash functions and the number of bits in the array this can be improved even further.&lt;/p&gt;

&lt;h3 id=&#34;space-advantage:d5d8a5425bd3ed6bd548c6538f6ba3fb&#34;&gt;Space Advantage&lt;/h3&gt;

&lt;p&gt;The space advantage in a Bloom Filter comes from the compactness from the data structure. A Bloom filter with 1% error and an optimal value of k, requires only about 9.6 bits (1.2 bytes) per element — regardless of the size of the elements&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:d5d8a5425bd3ed6bd548c6538f6ba3fb:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:d5d8a5425bd3ed6bd548c6538f6ba3fb:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;. Comparing this value to storing a typical integer in hash table which would take 32 bits or (4 bytes).&lt;/p&gt;

&lt;h3 id=&#34;implementations:d5d8a5425bd3ed6bd548c6538f6ba3fb&#34;&gt;Implementations&lt;/h3&gt;

&lt;p&gt;Hopefully, if you&amp;rsquo;ve come this long you are probably sold on giving the data structure a shot. Armon Dadgar&amp;rsquo;s &lt;a href=&#34;https://github.com/armon/bloomd&#34;&gt;bloomd&lt;/a&gt; is excellent implementation inspired by Memcached. There are also a good number of client libraries available in popular languages. If you&amp;rsquo;re using &lt;a href=&#34;http://redis.io/&#34;&gt;Redis&lt;/a&gt; you can use the &lt;code&gt;SETBIT&lt;/code&gt; and &lt;code&gt;GETBIT&lt;/code&gt; functions to have a redis backed bloom filter. The &lt;a href=&#34;http://redis.io/topics/data-types&#34;&gt;documentation&lt;/a&gt; has some helpful examples to help you.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:d5d8a5425bd3ed6bd548c6538f6ba3fb&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I hope this article was useful in whetting your appetite about Bloom Filters. Probabilisitic data structures are really cool and in my opinion, bloom filters are a perfect introduction to the topic.&lt;/p&gt;

&lt;p&gt;Feel free to leave any comments or suggestions in the comments below.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:d5d8a5425bd3ed6bd548c6538f6ba3fb:1&#34;&gt;The example is motivated by the one discussed by Prof. Jeff Ullman in a lecture of the &lt;a href=&#34;https://www.coursera.org/course/mmds&#34;&gt;Mining Massive Datasets course&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:d5d8a5425bd3ed6bd548c6538f6ba3fb:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:d5d8a5425bd3ed6bd548c6538f6ba3fb:2&#34;&gt;To read about the proof, please read section &lt;code&gt;4.4.3&lt;/code&gt; of the &lt;a href=&#34;http://mmds.org/#ver21&#34;&gt;Mining Massive Datasets book&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:d5d8a5425bd3ed6bd548c6538f6ba3fb:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:d5d8a5425bd3ed6bd548c6538f6ba3fb:3&#34;&gt;&lt;a href=&#34;http://theory.stanford.edu/~rinap/papers/esa2006b.pdf&#34;&gt;Bonomi et al&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:d5d8a5425bd3ed6bd548c6538f6ba3fb:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Just Learn</title>
      <link>http://192.241.186.225/articles/just-learn/</link>
      <pubDate>Thu, 02 Oct 2014 12:34:58 AST</pubDate>
      
      <guid>http://192.241.186.225/articles/just-learn/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;So strangely enough the optimal thing do to in college if you want to be a successful startup founder is not some sort of new, vocational version of college focused on &amp;ldquo;entrepreneurship.&amp;rdquo; It&amp;rsquo;s the classic version of college as education for its own sake. If you want to start a startup after college, what you should do in college is learn powerful things. And if you have genuine intellectual curiosity, that&amp;rsquo;s what you&amp;rsquo;ll naturally tend to do if you just follow your own inclinations.&lt;/p&gt;

&lt;p&gt;The component of entrepreneurship that really matters is domain expertise. The way to become Larry Page was to become an expert on search. And the way to become an expert on search was to be driven by genuine curiosity, not some ulterior motive.&lt;/p&gt;

&lt;p&gt;At its best, starting a startup is merely an ulterior motive for curiosity. And you&amp;rsquo;ll do it best if you introduce the ulterior motive toward the end of the process.&lt;/p&gt;

&lt;p&gt;So here is the ultimate advice for young would-be startup founders, boiled down to two words: &lt;strong&gt;just learn.&lt;/strong&gt; - &lt;a href=&#34;http://paulgraham.com/before.html&#34;&gt;Paul Graham&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Armin on Rust</title>
      <link>http://192.241.186.225/articles/armin-on-rust/</link>
      <pubDate>Wed, 01 Oct 2014 12:34:58 AST</pubDate>
      
      <guid>http://192.241.186.225/articles/armin-on-rust/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been trying out Rust for some time and have been totally loving it so far. Glad to see that Armin Ronacher, one of the programmers I highly respect &lt;a href=&#34;http://lucumr.pocoo.org/2014/10/1/a-fresh-look-at-rust/&#34;&gt;feels the same&lt;/a&gt;!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Rust is inspiring for many reasons. The biggest reason I like it is because it&amp;rsquo;s practical. I tried Haskell, I tried Erlang and neither of those languages spoke &amp;ldquo;I am a practical language&amp;rdquo; to me. I know there are many programmers that adore them, but they are not for me. Even if I could love those languages, other programmers would never do and that takes a lot of enjoyment away.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One aspect that Armin doens&amp;rsquo;t mention is the Rust community. In my (relatively small) experience I have felt that the community is extremely friendly and open to new comers. Case in point: I submitted a &lt;a href=&#34;https://github.com/Hoverbear/rust-rosetta/pull/224&#34;&gt;pull-request&lt;/a&gt; to a popular rust project and I got a number of comments from reviewers pointing out my mistakes and showing me idiomatic Rust code. All in all, they made me feel very welcome and inspired me to keep writing more Rust.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Rust has been changing for years now in such dramatic ways that coming back after two months feels almost like working in a different language&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is indeed true. The language changes so fast that builds spaced even a week apart cause the same code to not compile anymore. Overall, I feel that is great and although that might lead to frustration it shows that the Rust team is dedicated to improving the language.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s this famous quote by Alan Perlis where he says -&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A language that doesn&amp;rsquo;t affect the way you think about programming, is not worth knowing&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rust is definitely a language that changes the way you think. The concepts of borrowing and data races are typically foreign to a programmer who&amp;rsquo;s spent most of his time on languages like Python, Javascript, Java and having to think about these concepts is extremely enlightening.&lt;/p&gt;

&lt;p&gt;Overall, if you&amp;rsquo;re looking to learn a programming language that changes the way you think and want to have fun at the same time pick Rust. You will not be disappointed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Happy Accident</title>
      <link>http://192.241.186.225/articles/a-happy-accident/</link>
      <pubDate>Sat, 13 Sep 2014 12:34:58 AST</pubDate>
      
      <guid>http://192.241.186.225/articles/a-happy-accident/</guid>
      <description>&lt;p&gt;Last week, I was pleasantly surprised to find an email by a correspondent of &lt;a href=&#34;http://economictimes.indiatimes.com/&#34;&gt;Economic Times&lt;/a&gt; (a leading newspaper in India) asking for permission to quote a comment I made on &lt;a href=&#34;https://news.ycombinator.com/item?id=7698688&#34;&gt;Hacker News&lt;/a&gt; in the newspaper&amp;rsquo;s front page!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I hope they have India on their radar! It would be awesome for the Indian Startup scene to hear all those great speakers live!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure&gt; &lt;img src=&#34;/images/et.jpg&#34;&gt; &lt;/figure&gt;

&lt;p&gt;Who knew that a comment on HN would end up on the front-page of a newspaper!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why Do You Want To Do Great Things?</title>
      <link>http://192.241.186.225/articles/why-do-you-want-to-do-great-things/</link>
      <pubDate>Thu, 14 Aug 2014 12:34:58 AST</pubDate>
      
      <guid>http://192.241.186.225/articles/why-do-you-want-to-do-great-things/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Why do you want to do great things? Seriously, dig into it. When I ask a lot of people in startups this question and dig long enough, it comes down to money&amp;ndash; they want to be rich, they want to be free.&lt;/p&gt;

&lt;p&gt;Fact: I&amp;rsquo;ve met these rich/free people and they are largely working their asses off to get more rich (and presumably more free?). The ones who make it (largely) LOVE THE GAME. The few who get rich somehow but don&amp;rsquo;t actually love the game of getting rich are listlessly complaining about being unhappy.&lt;/p&gt;

&lt;p&gt;You don&amp;rsquo;t love the game, it seems. &lt;strong&gt;The way to be happy/satisfied is to find the game that you love or learn to love the game you&amp;rsquo;re playing. The latter is often what to focus on&amp;ndash; there people with much less interesting jobs that are satisfied with them.&lt;/strong&gt; Whatever job you have, figure out how to be freakin&amp;rsquo; awesome at it and opportunities fall into your lap- trust me. Or be the guy who gets by, can&amp;rsquo;t be happy, is always looking out the window.&lt;/p&gt;

&lt;p&gt;All that said, don&amp;rsquo;t settle for a shitty job. Get one where you&amp;rsquo;re surrounded by people who impress you in an industry/market that has potential. That&amp;rsquo;s where you&amp;rsquo;ll find your next co-founder.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve got great ideas, start side projects. They turn into businesses all the time.&lt;/p&gt;

&lt;p&gt;Reduce your burn rate ruthlessly and save $. Seriously, your car/house/clothes are too nice, and you have them because society makes you feel less successful if you don&amp;rsquo;t. Happiness and stuff have virtually no correlation. Get to the point where you&amp;rsquo;re downright smug about your burn rate. Smirk at people who drive BMWs.&lt;/p&gt;

&lt;p&gt;Remember that a million years of evolution has made humanity naturally discontent&amp;ndash; do you think happiness/contentedness is a survival trait? Add to that the external pressure of peers who make it big, do &amp;ldquo;great things&amp;rdquo;, and the river of marketing telling you that you need fancier watches, shinier cars, the newest iPhone. &lt;strong&gt;Being happy/content takes smarts and discipline that most people simply can&amp;rsquo;t manage. Be one of the ones who can&lt;/strong&gt;. - Tony Wright via &lt;a href=&#34;https://news.ycombinator.com/item?id=8177830&#34;&gt;HN&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is why I love HN.  Do checkout the rest of the &lt;a href=&#34;https://news.ycombinator.com/item?id=8177259&#34;&gt;discussion&lt;/a&gt;. It&amp;rsquo;s awesome.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Maciej on Matasano</title>
      <link>http://192.241.186.225/articles/maciej-on-matasano/</link>
      <pubDate>Tue, 12 Aug 2014 12:34:58 AST</pubDate>
      
      <guid>http://192.241.186.225/articles/maciej-on-matasano/</guid>
      <description>&lt;p&gt;Just when you promise yourself that you are going to work on &lt;a href=&#34;http://csapp.cs.cmu.edu/&#34;&gt;systems&lt;/a&gt; for a couple of weeks and not get diverted, you get to hear about new ways to kill time learning &lt;a href=&#34;http://cryptopals.com/&#34;&gt;crypto&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a programmer, my core strengths have always been knowing how to apologize to users, and composing funny tweets. While I can hook up a web template to a database and make the squigglies come out right, I cannot efficiently sort something for you on a whiteboard, or tell you where to get a monad. From my vantage point, crypto looms as high as Mount Olympus. - Maciej Ceglowski on &lt;a href=&#34;https://blog.pinboard.in/2013/04/the_matasano_crypto_challenges/&#34;&gt;Matasano Crypto Challenges&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Weekend Hack - Monte Pi</title>
      <link>http://192.241.186.225/articles/pi-approximations-using-monte-carlo/</link>
      <pubDate>Mon, 11 Aug 2014 12:34:58 AST</pubDate>
      
      <guid>http://192.241.186.225/articles/pi-approximations-using-monte-carlo/</guid>
      <description>&lt;figure&gt; &lt;img src=&#34;https://raw.githubusercontent.com/prakhar1989/monte-pie/master/shot.png&#34;&gt; &lt;/figure&gt;

&lt;p&gt;I spent this weekend building a cool visualization to better understand Monte Carlo methods. With [p5.js]() just being released last week, I was anxiously looking for a project idea that I could use this library for. Thanks to a &lt;a href=&#34;http://www.cs.princeton.edu/~dpw/courses/cos326-12/&#34;&gt;Functional Programming&lt;/a&gt; course that I was working on last week, the idea came soon enough.&lt;/p&gt;

&lt;p&gt;Monti Pi is a simple app that shows how you can carry out multiple Monte Carlo simulations to approximate the value of Pi. You can go ahead and check out the &lt;a href=&#34;http://montepie.herokuapp.com&#34;&gt;demo on Heroku&lt;/a&gt;. Both p5 and coffeescript have been a total joy to use so much so that the next time I work on a Javascript project, I&amp;rsquo;ll make sure I use Coffeescript!&lt;/p&gt;

&lt;p&gt;Much to my surprise, the project came on the front-page of Hacker News and received a lot of &lt;a href=&#34;https://news.ycombinator.com/item?id=8159010&#34;&gt;interesting comments&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Organizing Angular Apps for Testing</title>
      <link>http://192.241.186.225/articles/organizing-angular-apps-for-testing/</link>
      <pubDate>Sat, 02 Aug 2014 12:34:58 AST</pubDate>
      
      <guid>http://192.241.186.225/articles/organizing-angular-apps-for-testing/</guid>
      <description>

&lt;p&gt;In the &lt;a href=&#34;/articles/choosing-angular&#34;&gt;last post&lt;/a&gt;, I talked about how we moved away from jQuery to Angularjs to power our single page application. To recap, the major problems with our existing code which convinced us to do a rewrite -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The existing code was written by a team which was no longer with the project. No one on the existing team had a strong understanding of how the code worked.&lt;/li&gt;
&lt;li&gt;Without any structure, the code was extremely hard to maintain and understand. Having a huge javascript file with more than 1500 lines of code was a complete nightmare.&lt;/li&gt;
&lt;li&gt;There were no tests at all which made refactoring a very hard exercise. Whenever a bug was reported the team used to be scared to break something that was already working.&lt;/li&gt;
&lt;li&gt;It used a technology (jQuery) which was totally not suited to the problem. This meant that adding any new features on the existing application would result in a lot more code which while using a better technology could be accomplished with much lesser.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Early on, my primary focus was to guard against these problems and as a result, I spent considerable time trying to understand the best practices in building a single page application.Below are a few practices that I decided to carry on as I start building this project&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Comprehensive documentation and well-commented code along with regular code reviews and walkthroughs with the rest of the team so that everyone has a good enough understanding of the application.&lt;/li&gt;
&lt;li&gt;Having an intuitive and scalable project structure, organized by modules in order to aid traversing the code and reduce the maintainence hassle.&lt;/li&gt;
&lt;li&gt;Gain confidence in the code by writing strong set of unit and end-to-end tests.&lt;/li&gt;
&lt;li&gt;Have a well organized build system (asset pipeline if you may) to manage these tasks and automate best practices.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;structure:476242b55cbd58e58bba92505cd1a3f6&#34;&gt;Structure&lt;/h3&gt;

&lt;p&gt;Before we get on the topic of structure, let me state my goal outright.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My goal is here to have many Angular files in development, but they need to be loaded into the browser in bulk (as a single minified file).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What that basically means is that I want to have many files in my local dev environment (I prefer to structure my app by function) but finally generate just a single file (preferably minfied) that can run in production.&lt;/p&gt;

&lt;p&gt;Burke Holland had a &lt;a href=&#34;http://developer.telerik.com/featured/requiring-vs-browerifying-angular/&#34;&gt;fantastic post&lt;/a&gt; explaining how Angular loads an application and comparing the merits of browserify vs require.js in an Angular app. As pointed out, RequireJS seems much more complicated in order to set it up with Angular apps. Instead of re-iterating his reasons here, I would extol you to go and give it a read yourself. Browserify, on the other hand does bring in some goodness of node.js modules in to browser but that also seemed like an overkill. Finally, reading over the comments on HN, I came across &lt;a href=&#34;https://news.ycombinator.com/item?id=8010997&#34;&gt;this comment&lt;/a&gt; by Burke Holland himself which basically switched on a light bulb in my head, and I decided to simply leverage Angular&amp;rsquo;s module system and do a concat on files before serving them to the browser.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m starting to think that module systems on Angular&amp;rsquo;s modules is a bad idea. Maybe I&amp;rsquo;m overthinking this. Should we just grunt-concat (or whatever Gulp does) and move on with life? - Burke Holland&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The simplest way is to organize your files is by functionality. Another popular method is to organize by application type eg. &lt;code&gt;login&lt;/code&gt;, &lt;code&gt;cart&lt;/code&gt; etc. With that in mind, this is how my current &lt;code&gt;src&lt;/code&gt; folder looks like -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├── app.js
├── controllers
│   ├── AddressController.js
│   ├── DeliveryController.js
│   ├── EditAddressController.js
│   ├── LoginController.js
│   └── NewAddressController.js
├── filters
│   └── LanguageFilters.js
└── services
    ├── AddressService.js
    ├── DeliveryService.js
    ├── CartService.js
    └── Constants.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, to make this work there is one small thing that needs to be kept in mind i.e. making sure your code uses Angular modules for declaration. So for example, instead of declaring a &lt;code&gt;factory&lt;/code&gt; like so&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var app = angular.module(&#39;myApp&#39;, [&#39;ngRoute&#39;]);

app.factory(&#39;CartService&#39;, function() {
  return {
    getItems: function() {},
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;we should instead do this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;angular.module(&#39;myApp&#39;, [&#39;ngRoute&#39;]); // setter

angular.module(&#39;myApp&#39;) // getter 
  .factory(&#39;CartService&#39;, function() {
    return {
      getItems: function() {},
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are 2 problems with the first way.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It adds the &lt;code&gt;app&lt;/code&gt; variable in the global scope. If you create another application that uses &lt;code&gt;app&lt;/code&gt; variable, this will be an issue.&lt;/li&gt;
&lt;li&gt;For the factory definition to work, the &lt;code&gt;app&lt;/code&gt; should already be defined. This creates, sort of a dependency, that needs to be tracked while concatenating.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The second way, however, faces none of the two flaws and allows you to be totally flexible in terms of ordering your declarations. With that done, here&amp;rsquo;s a simple grunt config that you can have to concat the &lt;code&gt;src&lt;/code&gt; files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module.exports = function(grunt) {

  // Project configuration.
  grunt.initConfig({
    pkg: grunt.file.readJSON(&#39;package.json&#39;),
    uglify: {
      options: {
	preserveComments: &#39;some&#39;,
	sourceMap: true
      },
      build: {
        src: &#39;build/main.js&#39;,
        dest: &#39;build/main.min.js&#39;
      }
    },
    concat: {
      options: {
        stripBanners: false,
        separator: &amp;quot;;&amp;quot;,
      },
      dist: {
        src: [&#39;src/**/*.js&#39;],
        dest: &amp;quot;build/main.js&amp;quot;
      }
    },
    watch: {
      scripts: {
        files: [&amp;quot;src/**/*.js&amp;quot;],
        tasks: [&#39;concat&#39;, &#39;uglify&#39;],
        options: {
          spawn: false
        },
      },
    },
  });

  // Load the plugins
  grunt.loadNpmTasks(&#39;grunt-contrib-concat&#39;);
  grunt.loadNpmTasks(&#39;grunt-contrib-uglify&#39;);
  grunt.loadNpmTasks(&#39;grunt-contrib-watch&#39;);

  // Default task(s).
  grunt.registerTask(&#39;default&#39;, [&#39;concat&#39;, &#39;uglify&#39;]);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The grunt file above contains three simple tasks - &lt;code&gt;uglify&lt;/code&gt;, &lt;code&gt;watch&lt;/code&gt;, &lt;code&gt;concat&lt;/code&gt;. Quite simply, the &lt;code&gt;concat&lt;/code&gt; task concatenates all the source files into a file located in &lt;code&gt;build&lt;/code&gt; folder. The &lt;code&gt;uglify&lt;/code&gt; task then takes the concatenated output and produces a minified js file along with a source map. [Source maps]() are an awesome feature in modern browsers that take the pain out of debugging minified javascript. I&amp;rsquo;ll be covering source maps in a separate article but until then you can go ahead and read [this]() article on HTML5 rocks to get a good gist on how they work. Finally, the &lt;code&gt;watch&lt;/code&gt; is a grunt task for the lazy that triggers a set of tasks (specified in &lt;code&gt;tasks&lt;/code&gt; array) to run whenever any file as mentioned in the &lt;code&gt;files&lt;/code&gt; options changes.&lt;/p&gt;

&lt;h3 id=&#34;testing:476242b55cbd58e58bba92505cd1a3f6&#34;&gt;Testing&lt;/h3&gt;

&lt;p&gt;With our angular app&amp;rsquo;s structure properly setup, lets get onto the fun stuff - testing. As with all apps, it is a good idea to write both unit and integration tests. One of the most awesome things about Angular is the fact that testing is treated as first-class citizen which is abundantly evident by the fantastic set of tools made available by the Angular team. These tools clearly take the pain out of setting up a test suite and the online docs provide a great starting point for writing robust set of tests. There are two specific testing tools that are typically used for testing Angular apps -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://karma-runner.github.io/0.12/index.html&#34;&gt;Karma&lt;/a&gt; for unit tests&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/protractor&#34;&gt;Protractor&lt;/a&gt; for end-to-end tests&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The preferred way of organizing tests is to keep the &lt;code&gt;e2e&lt;/code&gt; and &lt;code&gt;unit&lt;/code&gt; tests separate.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├── e2e
│   ├── delivery.spec.js
│   ├── index.spec.js
│   └── loginpage.spec.js
├── karma.conf.js
├── protractor.conf.js
├── server.js
└── unit
    ├── specs
    │   ├── delivery.spec.js
    └── vendorv
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;unit-tests-with-karma:476242b55cbd58e58bba92505cd1a3f6&#34;&gt;Unit tests with Karma&lt;/h4&gt;

&lt;p&gt;Karma is a test runner used and built by the Angular team to run unit tests. It has support for various testing frameworks like &lt;a href=&#34;http://visionmedia.github.io/mocha/&#34;&gt;Mocha&lt;/a&gt;, &lt;a href=&#34;http://jasmine.github.io/&#34;&gt;Jasmine&lt;/a&gt; etc. that help you write tests. Thanks to the power of dependancy injection and the modular nature of angular, writing unit tests to tests all parts of your application - from directives to controllers and services can be very easy.&lt;/p&gt;

&lt;p&gt;Karma requires a configuration file in order to run. &lt;a href=&#34;https://gist.github.com/prakhar1989/d38d6af5e1025a978c8c.js&#34;&gt;Here&amp;rsquo;s&lt;/a&gt; a sample configuration file that you can use to base your configuration off. The most important parts of the configuration are the &lt;code&gt;files&lt;/code&gt; and the &lt;code&gt;frameworks&lt;/code&gt; property.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// available frameworks: https://npmjs.org/browse/keyword/karma-adapter
frameworks: [&#39;jasmine&#39;],

// list of files / patterns to load in the browser
files: [
  &#39;tests/unit/vendor/angular.min.js&#39;,
  &#39;tests/unit/vendor/angular-mocks.js&#39;,
  &#39;src/filters/filters.js&#39;,
  &#39;src/services/DeliveryService.js&#39;,
  &#39;src/services/CartService.js&#39;,
  &#39;src/services/MessageService.js&#39;,
  &#39;tests/unit/specs/*.js&#39;
],
{% endhighlight %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Do make sure to include &lt;code&gt;angular.min.js&lt;/code&gt; and &lt;code&gt;angular-mocks.js&lt;/code&gt; or you&amp;rsquo;ll be beating yourself with incomprehensible error messages from Angular while running your tests. With that setup, you can run &lt;code&gt;karma start tests/karma.conf.js --single-run&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how we can inject the angular app in karma tests. To illustrate, I am going to use the &lt;code&gt;deliveryService&lt;/code&gt; service and write tests for it.&lt;/p&gt;

&lt;p&gt;Delivery Service -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;angular.module(&#39;appServices.DeliveryService&#39;, [])
.factory(&#39;DeliveryService&#39;, function() {
  return {
    getDeliveryModes: function() { return {} }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Delivery Spec -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe(&#39;Service&#39;, function() {
  beforeEach(module(&#39;appServices.DeliveryService&#39;));

  describe(&#39;delivery service&#39;, function() {
    beforeEach(inject(function(DeliveryService) {
    // inject the service and do other things here
    }));

    it(&amp;quot;should get modes correctly&amp;quot;, inject(function(DeliveryService) {
      var deliveryInfo = DeliveryService.getDeliveryModes();
      expect(deliveryInfo).toEqual({});
    }));
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And with that, you have a fully functioning spec that you can test to your heart&amp;rsquo;s content.&lt;/p&gt;

&lt;h4 id=&#34;end-to-end-tests-with-protractor:476242b55cbd58e58bba92505cd1a3f6&#34;&gt;End-to-End tests with Protractor&lt;/h4&gt;

&lt;p&gt;From Protractor&amp;rsquo;s documentation - &lt;em&gt;Protractor is an end-to-end test framework for AngularJS applications. Protractor is a Node.js program built on top of WebDriverJS. Protractor runs tests against your application running in a real browser, interacting with it as a user would.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In other words, think of Protractor as Selenium with Angular goodness. For example, if you have a &lt;code&gt;input&lt;/code&gt; element like so&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;name&amp;quot; placeholder=&amp;quot;Enter Name&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then you can use use the &lt;code&gt;by.model&lt;/code&gt; selector to select the element, right within a protractor test spec&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;element(by.model(&#39;name&#39;)).sendKeys(1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty cool, right?&lt;/p&gt;

&lt;p&gt;Honestly, Protractor behaves just like an end-user and doesn&amp;rsquo;t give two hoots about how modular your application is. With protractor, you use a config file to tell the server address and you are done. Here&amp;rsquo;s a sample config file -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exports.config =  {
  seleniumAddress: &#39;http://127.0.0.1:4444/wd/hub&#39;,
    specs: [
    &amp;quot;./e2e/*.spec.js&amp;quot;
    ],
    suites: {
      login: &amp;quot;./e2e/loginpage.spec.js&amp;quot;,
      delivery: &amp;quot;./e2e/delivery.spec.js&amp;quot;
    },
    jasmineNodeOpts: {
      isVerbose: true,
      showColors: true,
      defaultTimeoutInterval: 5000
    },
    baseUrl: &amp;quot;http://localhost:8000&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Installing Protractor is quite simple. I&amp;rsquo;d suggest you quickly walk through the &lt;a href=&#34;https://github.com/angular/protractor/blob/master/docs/tutorial.md&#34;&gt;getting started page&lt;/a&gt; to setup everything.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:476242b55cbd58e58bba92505cd1a3f6&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Hopefully this (rather long) post has helped you in understanding how to organize your angular apps specifically for testing. Even if you dont plan to write tests, I&amp;rsquo;ve found this organization structure to be quite helpful and intuitive.&lt;/p&gt;

&lt;p&gt;If you feel I&amp;rsquo;ve missed out something or have some other tips to share - please feel free to share them in the comments below.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GOOOAL</title>
      <link>http://192.241.186.225/articles/goooal/</link>
      <pubDate>Wed, 30 Jul 2014 12:34:58 AST</pubDate>
      
      <guid>http://192.241.186.225/articles/goooal/</guid>
      <description>

&lt;p&gt;Today morning while browsing &lt;a href=&#34;http://thechangelog.com/can-your-favorite-programming-language-score-a-goal/&#34;&gt;The Changelog&lt;/a&gt;, I came across this interesting project called - &lt;a href=&#34;https://github.com/eatnumber1/goal&#34;&gt;Goal&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;g()(&amp;lsquo;al&amp;rsquo;) is a challenge whereby you need to write in as many languages as possible code which enables the code g()(&amp;lsquo;al&amp;rsquo;) to return the string &amp;ldquo;goal&amp;rdquo;, the code g()()(&amp;lsquo;al&amp;rsquo;) to return the string &amp;ldquo;gooal&amp;rdquo;, the code g()()()(&amp;lsquo;al&amp;rsquo;) return the string &amp;ldquo;goooal&amp;rdquo;, etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This sounded a good way to kill a couple of hours on a lazy holiday so I decided to give this a shot in a couple of programming languages I know.&lt;/p&gt;

&lt;h3 id=&#34;higher-order-functions:fa9361b7b4f89a417f4a35df62daa89b&#34;&gt;Higher Order Functions&lt;/h3&gt;

&lt;p&gt;The project is interesting because it is a fun way to demonstrate support for higher order functions in your favorite language. Getting to see how this is accomplished in all kinds of languages (and languages where it&amp;rsquo;s not possible) is quite useful. The key idea to solve this problem is indeed simple -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a function &lt;code&gt;g&lt;/code&gt; that takes two arguments. One to check for the suffix and other to count the number of &amp;lsquo;o&amp;rsquo;s to insert&lt;/li&gt;
&lt;li&gt;If the function &lt;code&gt;g&lt;/code&gt; is called without a suffix e.g. &lt;code&gt;g()&lt;/code&gt; return a function that returns the function &lt;code&gt;g&lt;/code&gt; with the count incremented&lt;/li&gt;
&lt;li&gt;If the function &lt;code&gt;g&lt;/code&gt; is called with a suffix e.g. &lt;code&gt;g()(&#39;al&#39;)&lt;/code&gt; return the final string by concatenating &amp;lsquo;g&amp;rsquo;, the numbers of &amp;lsquo;o&amp;rsquo;s and the suffix.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Programming languages where functions can be returned make this problem very easy to solve. Languages where this is not possible, there are techniques like &lt;a href=&#34;https://github.com/eatnumber1/goal/blob/dff31f6544c619d897477dc4b1d23c707cadbc0c/solutions/complete/zsh/o11c/goal.zsh#L10-L11&#34;&gt;regex matching&lt;/a&gt;, &lt;a href=&#34;https://github.com/eatnumber1/goal/blob/dff31f6544c619d897477dc4b1d23c707cadbc0c/solutions/complete/ruby/mastfish/goal.rb#L2-L5&#34;&gt;metaprogramming&lt;/a&gt;, or &lt;a href=&#34;https://github.com/eatnumber1/goal/blob/dff31f6544c619d897477dc4b1d23c707cadbc0c/solutions/complete/c/tolmasky/goal.c#L14-L17&#34;&gt;preprocessing&lt;/a&gt; to solve the problem.&lt;/p&gt;

&lt;h3 id=&#34;python:fa9361b7b4f89a417f4a35df62daa89b&#34;&gt;Python&lt;/h3&gt;

&lt;p&gt;The code below in Python is a literal translation of the above pseudo-code and pretty readable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def g(al=None, count=0):
    if al:
        return &#39;g&#39; + (count * &#39;o&#39;) + al
    else:
        return lambda al=None: g(al, count+1)

print(g(&#39;al&#39;))       # gal
print(g()(&#39;al&#39;))     # goal
print(g()()(&#39;al&#39;))   # gooal
print(g()()()(&#39;al&#39;)) # goooal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s the &lt;a href=&#34;https://en.wikipedia.org/wiki/Code_golf&#34;&gt;golfed&lt;/a&gt; version (in case you&amp;rsquo;re into golfing)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def g(al=None,c=0):
    return &#39;g&#39;+c*&#39;o&#39;+al if al else lambda al=None: g(al, c+1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Must-Read Python submissions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eatnumber1/goal/blob/master/solutions/complete/python/panzi/goal.py&#34;&gt;This&lt;/a&gt; one uses partial functions to return a new function using the &lt;code&gt;functools&lt;/code&gt; module.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eatnumber1/goal/blob/master/solutions/complete/python/orf/goal.py&#34;&gt;This&lt;/a&gt; one uses the &lt;code&gt;inspect&lt;/code&gt; module to regex match through the stack trace.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;javascript:fa9361b7b4f89a417f4a35df62daa89b&#34;&gt;Javascript&lt;/h3&gt;

&lt;p&gt;The same thing is implemented below in Javascript but with a slight change. Since, javascript does not provide support for default arguments a neat way is to keep updating the second argument with repeated &amp;lsquo;o&amp;rsquo;s.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function g(al,o) {
  if (al === undefined) {
    return function(al) {
      return g(al, ((o||&#39;&#39;)+&#39;o&#39;))
    }
  } else {
    return &#39;g&#39; + (o||&#39;&#39;) + al
  }
}
console.log(g(&#39;al&#39;))       // gal
console.log(g()(&#39;al&#39;))     // goal
console.log(g()()(&#39;al&#39;))   // gooal
console.log(g()()()(&#39;al&#39;)) // goooal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can be made much shorter by using &lt;a href=&#34;http://coffeescript.org/#try:g%20%3D%20(al%2Co&#34;&gt;coffeescript&lt;/a&gt;%20-%3E%20return%20if%20al%20then%20&amp;rsquo;g&amp;rsquo;%2B(o%7C%7C&amp;rdquo;)%2Bal%20else%20(al)%20-%3E%20return%20g(al%2C%20((o%7C%7C&amp;rdquo;)%2B&amp;rsquo;o&amp;rsquo;))%0A%0Aalert%20g()()(&amp;lsquo;al&amp;rsquo;)%0Aalert%20g()()()()()(&amp;lsquo;al&amp;rsquo;)%0A) (thanks to the &lt;code&gt;-&amp;gt;&lt;/code&gt; syntax)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;g = (al,o) -&amp;gt; return if al then &#39;g&#39;+(o||&#39;&#39;)+al else (al) -&amp;gt; return g(al,((o||&#39;&#39;)+&#39;o&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ocaml:fa9361b7b4f89a417f4a35df62daa89b&#34;&gt;OCaml&lt;/h3&gt;

&lt;p&gt;OCaml is a language that I&amp;rsquo;ve been &lt;a href=&#34;https://github.com/prakhar1989/ocaml-experiments&#34;&gt;learning lately&lt;/a&gt;. Being functional, this seemed a rather easy task to accomplish. Unfortunately, due to lexical reasons you can&amp;rsquo;t use the &lt;code&gt;g()()&lt;/code&gt; syntax for function calls (without hacking the parser). However, below is the code that does something similar.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let g f = f &amp;quot;g&amp;quot;
let al x = x ^ &amp;quot;al&amp;quot;
let o x f = f (x ^ &amp;quot;o&amp;quot;)

let () =
  print_endline (g al);       (* gal *)
  print_endline (g o al);     (* goal *)
  print_endline (g o o o al); (* goooal *)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: The OCaml solution has been picked up from this &lt;a href=&#34;http://www.reddit.com/r/programming/comments/2btrvt/gal/cj8yj2k&#34;&gt;reddit thread&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;other-languages:fa9361b7b4f89a417f4a35df62daa89b&#34;&gt;Other Languages&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Not surprisingly, both Java and PHP do not have a solution (atleast a solution that follows all the &lt;a href=&#34;https://github.com/eatnumber1/goal#rules&#34;&gt;rules&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://github.com/eatnumber1/goal/blob/master/solutions/complete/nimrod/dom96/goal.nim&#34;&gt;nimrod&lt;/a&gt; submission defines a new operator and comes up with a brilliantly clever solution&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://github.com/eatnumber1/goal/blob/master/solutions/complete/scala/lopopolo/goal.scala&#34;&gt;scala&lt;/a&gt; code defines a case class to concisely run the constructor every time &lt;code&gt;()&lt;/code&gt; is seen.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more exciting solutions do check out the &lt;a href=&#34;https://github.com/eatnumber1/goal#previous-solutions&#34;&gt;github repo&lt;/a&gt; and the &lt;a href=&#34;https://github.com/eatnumber1/goal/pulls&#34;&gt;pull requests&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The String Rotation Problem</title>
      <link>http://192.241.186.225/articles/the-string-rotation-problem/</link>
      <pubDate>Tue, 22 Jul 2014 12:34:58 AST</pubDate>
      
      <guid>http://192.241.186.225/articles/the-string-rotation-problem/</guid>
      <description>&lt;p&gt;On a recent (rather long) flight, while I was devouring Jon Bentley&amp;rsquo;s &lt;a href=&#34;http://www.cs.bell-labs.com/cm/cs/pearls/&#34;&gt;Programming Pearls&lt;/a&gt;, I came across this rather interesting problem.&lt;/p&gt;

&lt;p&gt;The problem is simple - How will you a rotate a string of length &lt;code&gt;n&lt;/code&gt; by &lt;code&gt;i&lt;/code&gt; steps in place i.e. without using any extra space?&lt;/p&gt;

&lt;figure&gt; &lt;img src=&#34;/images/string_rotate.png&#34;&gt; &lt;/figure&gt;

&lt;p&gt;The example shown below makes it quite clear. Now the easiest way to do this is to simply save the &lt;code&gt;i&lt;/code&gt; chars in a separate vector, shift the remaining chars by &lt;code&gt;i&lt;/code&gt; and finally, paste the initial &lt;code&gt;i&lt;/code&gt; items at the back. But this clearly uses extra space &lt;code&gt;O(i)&lt;/code&gt;. Another way is to simply move the entire array left by one and do this &lt;code&gt;i&lt;/code&gt; times. But this is too slow &lt;code&gt;O(i * n)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A really smart insight (which the author calls the &lt;strong&gt;Aha! moment&lt;/strong&gt;) is this - The shifted array is basically two arrays reversed twice.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how it works - Lets assume you have the array &lt;code&gt;ab&lt;/code&gt;. The array &lt;code&gt;a&lt;/code&gt; here is the array formed by the first &lt;code&gt;i&lt;/code&gt; chars and &lt;code&gt;b&lt;/code&gt; is the rest of it. In the example above,
array &lt;code&gt;a&lt;/code&gt; is &lt;code&gt;abc&lt;/code&gt; and array &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;defghi&lt;/code&gt;. With that in place, if we carry out the following transformation, we get back exactly what we need.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AB =&amp;gt; abc defghi &amp;lt;br/&amp;gt;
A&amp;lt;sup&amp;gt;r&amp;lt;/sup&amp;gt;B =&amp;gt; cba defghi &amp;lt;br/&amp;gt;
A&amp;lt;sup&amp;gt;r&amp;lt;/sup&amp;gt;B&amp;lt;sup&amp;gt;r&amp;lt;/sup&amp;gt; =&amp;gt; cba ihgfed &amp;lt;br/&amp;gt;
(A&amp;lt;sup&amp;gt;r&amp;lt;/sup&amp;gt;B&amp;lt;sup&amp;gt;r&amp;lt;/sup&amp;gt;)&amp;lt;sup&amp;gt;r&amp;lt;/sup&amp;gt; =&amp;gt; BA =&amp;gt; defghi abc (answer) &amp;lt;br/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is really a very neat trick to solve the problem, especially the part where you consider one array as a sum of two arrays. The author ends this section with a very interesting tidbit&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Brian Kernighan and P.J. Plauger used precisely this code in their 1981 Software tools in Pascal to move lines in a text editor. Kernighan reports that it ran correctly the first time it was executed, while their previous code for a similar task based on linked lists had several bugs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To make sure you are sold, below is some python code which does the same thing. Clearly, this algorithm is extremely clever and damn simple to implement!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def reverse(arr, start, end):
    &amp;quot;&amp;quot;&amp;quot; reverses an array from the start to the end, where start and end
    are zero indexed &amp;quot;&amp;quot;&amp;quot;
    for i in range((end - start + 1)/2):
        arr[start+i], arr[end-i] = arr[end-i], arr[start+i]
    return arr


def rotate(arr, i):
    &amp;quot;&amp;quot;&amp;quot; rotates an array i chars to the left &amp;quot;&amp;quot;&amp;quot;
    arr = reverse(arr, 0, i-1) # arb
    arr = reverse(arr, i, len(arr)-1) #arbr
    return reverse(arr, 0, len(arr)-1) #ba

if __name__ == &amp;quot;__main__&amp;quot;:
    s = &amp;quot;abcdefghi&amp;quot;
    print &amp;quot;&amp;quot;.join(rotate(list(s), 3)) # =&amp;gt; defghiabc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Until next time!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Heidi Roizen on ETL</title>
      <link>http://192.241.186.225/articles/heidi-roizen-on-etl/</link>
      <pubDate>Sat, 19 Jul 2014 12:34:58 AST</pubDate>
      
      <guid>http://192.241.186.225/articles/heidi-roizen-on-etl/</guid>
      <description>

&lt;p&gt;Last week, &lt;a href=&#34;http://marco.org&#34;&gt;Marco Arment&lt;/a&gt; launched a new product on &lt;a href=&#34;https://news.ycombinator.com/item?id=8042352&#34;&gt;HN&lt;/a&gt;, &lt;a href=&#34;http://overcast.fm&#34;&gt;Overcast&lt;/a&gt; - An iPhone app that makes listening to podcasts much easier (and more fun).&lt;/p&gt;

&lt;p&gt;There was a lot of productive discussion which made me realize that I need to give podcasts a serious chance. Given that I would be travelling soon, I went ahead, downloaded the &lt;a href=&#34;http://www.doggcatcher.com/&#34;&gt;most popular podcast&lt;/a&gt; app for Android and added a couple of feeds (thanks to &lt;a href=&#34;https://news.ycombinator.com/item?id=8041789&#34;&gt;this&lt;/a&gt; HN thread for recommendations).&lt;/p&gt;

&lt;p&gt;For the next 8 hours, I was completely tuned into talks by speakers on Stanford Enterprenuership Thought Leader series, highly entertaining discussions by Radiolab and interesting interviews on Software Engineering Radio. There&amp;rsquo;s one ETL talk that I particularly liked and wanted to write it down so that I don&amp;rsquo;t forget the lessons.&lt;/p&gt;

&lt;p&gt;Heidi Roizen talks about a list of ten things that she learnt from her experience as an entrepreneur and venture capitalist. The talk is awesome, I highly recommend you to give it a listen.&lt;/p&gt;

&lt;h3 id=&#34;ten-things:a9291618c63fff43ed0c75f3a65ae0fe&#34;&gt;Ten Things&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;If you&amp;rsquo;re not doing something hard you&amp;rsquo;re wasting your time.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t compromise on ethics.&lt;/li&gt;
&lt;li&gt;Trust your gut.&lt;/li&gt;
&lt;li&gt;Most important thing you will do as an entrepreneur is &lt;strong&gt;pick your team&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The art of negotiation is finding maximal intersection of &lt;strong&gt;mutual need&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The key to happiness to &lt;strong&gt;lower your expectations&lt;/strong&gt;. Expect life to be messy.&lt;/li&gt;
&lt;li&gt;Its not how many times you fall down but how you many times you get up. If you fall down and stay down, you&amp;rsquo;ll be that way for the rest of your life.&lt;/li&gt;
&lt;li&gt;Allow for randomness in life - a lot of good things will happen to you.&lt;/li&gt;
&lt;li&gt;If you ask people that in the last 5 years what is the worst thing that happened to you and what is the best thing that happened to you - for many people they are the &lt;strong&gt;same thing&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The 20-40-60 rule: At 20, you&amp;rsquo;re constantly worrying what other people think of you, at 40 you say that you&amp;rsquo;re not going to give a damn of what other people think of you and at 60 you come to realize that no one&amp;rsquo;s actually thinking of you. In reality: &lt;strong&gt;No one is actually thinking about you&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;See the full talk &lt;a href=&#34;http://ecorner.stanford.edu/author/heidi_roizen&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fun with SparkFun</title>
      <link>http://192.241.186.225/articles/fun-with-sparkfun/</link>
      <pubDate>Mon, 14 Jul 2014 12:34:58 AST</pubDate>
      
      <guid>http://192.241.186.225/articles/fun-with-sparkfun/</guid>
      <description>&lt;p&gt;This is about a quick hack that I did. Couple of days back, I came across a cool project called &lt;a href=&#34;https://data.sparkfun.com/&#34;&gt;SparkFun&lt;/a&gt; on &lt;a href=&#34;https://news.ycombinator.com/item?id=8015354&#34;&gt;HN&lt;/a&gt; which is free online service to push your data. It allows you to create streams and then push data via a simple HTTP call. The primary motivation behind the service is to enable devices connected via Internet of Things to push data online easily.&lt;/p&gt;

&lt;p&gt;I had been crawling a few websites to need of latest remittance rates to my home country (the rates offered for remittance differ quite substantially from the current spot rates). Its a &lt;a href=&#34;http://casperjs.org/&#34;&gt;casperjs&lt;/a&gt; script that crawls the page and sends me an email. Clearly, email was getting hard to analyse trends and see history - but I was quite lazy to work on setting up persistence for this quick hack. When I saw Sparkfun I instantly knew how I could achieve logging.&lt;/p&gt;

&lt;p&gt;In case you&amp;rsquo;re wondering on the architecture, here&amp;rsquo;s a &lt;a href=&#34;https://news.ycombinator.com/item?id=8016011&#34;&gt;comment&lt;/a&gt; by one of the founders -&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By default it writes metadata about the stream (title, description, etc) using a file based db called nedb, and it appends the actual logged data to CSV files that are split into 500k chunks. When the user requests their logged data, all of the files are stitched back together, converted into the requested format (JSON, CSV, etc), and streamed to the user’s web client.
For the production server, we are currently using MongoDb for metadata storage and the same CSV module for logged data storage.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the &lt;a href=&#34;https://data.sparkfun.com/streams/0llnrLvRyOFYXyv3yDD6&#34;&gt;stream&lt;/a&gt; that you can check for remittance rates. This is updated every 4 hours (as the bank itself updates the rates 5-6 times a day).  And below is the code that makes it possible -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var casper = require(&#39;casper&#39;).create();
 
var home_url = &amp;quot;https://applications2.almullagroup.com/onlineremit/faces/infrastructure/EXLogin.jspx&amp;quot;;
var sparkfun_url = &amp;quot;https://data.sparkfun.com/input/XCVB?private_key=ABCD&amp;amp;INR=&amp;quot;
 
casper.start(home_url);

casper.waitForSelector(&amp;quot;form#form1&amp;quot;);
 
casper.then(function() {
  this.fill(&#39;form[name=&amp;quot;form1&amp;quot;]&#39;,{ &#39;showrate&#39; : &#39;2&#39;});
  this.click(&#39;input[type=submit]&#39;)
});
 
casper.then(function(){
  var rate = this.getHTML(&#39;tr:nth-child(4) td:nth-child(4) span&#39;);
  this.echo(&amp;quot;AMX REMIT RATE - Rs.&amp;quot; +  rate); // later sent as an email as well
  this.open(sparkfun_url + rate);
});
 
casper.run();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Special thanks to &lt;a href=&#34;http://dushyantrao.github.io/&#34;&gt;Dushyant&lt;/a&gt; for introducing me to CasperJs&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Swift - First Impressions</title>
      <link>http://192.241.186.225/articles/swift-first-impressions/</link>
      <pubDate>Mon, 09 Jun 2014 12:34:58 AST</pubDate>
      
      <guid>http://192.241.186.225/articles/swift-first-impressions/</guid>
      <description>

&lt;p&gt;Last week at WWDC Apple made the most exciting announcement (for developers at least) of launching a new programming language - Swift. Although I have never written a single line of code for iOS (in Objective C) I got so excited that within no time I was installing Xcode 6 to give playground &amp;amp; Swift a shot.&lt;/p&gt;

&lt;p&gt;After spending a week with Swift I&amp;rsquo;ve come to the conclusion that it is a very well designed programming language. For a Python/JS developer like me I was able to get productive very easily. It has strong remanents of Scala which is something I definitely I can&amp;rsquo;t dig enough.&lt;/p&gt;

&lt;p&gt;Below is a small list of features that I love the most about Swift. Consider this is an initial evaluation only, as I gain more experience I will blog about using Protocols, Enumerations and Generics with more practical examples.&lt;/p&gt;

&lt;h3 id=&#34;type-inference:9c765f6cd3c9cb3494c0676a5cd8e7b9&#34;&gt;Type Inference&lt;/h3&gt;

&lt;p&gt;One of the biggest inhibitions that developers with experience in dynamic languages like Python / Ruby have towards static compiled languages is the verbosity in the syntax. Repeatedly declaring &lt;code&gt;String name = &amp;quot;abc&amp;quot;&lt;/code&gt; and &lt;code&gt;int age = 23&lt;/code&gt; gets frustrating and it might make you think - why isn&amp;rsquo;t my computer smart enough to figure out that &lt;code&gt;23&lt;/code&gt; is indeed an integer. In Swift, this is as simple as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let age = 23      // int
let name = &amp;quot;nasd&amp;quot; // string
let money = 23.3  // double
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modern languages like Go embrace type inference and in my opinion it is one of reasons why Go saw an upsurge of adoption within the Python / Ruby community.&lt;/p&gt;

&lt;h3 id=&#34;optionals:9c765f6cd3c9cb3494c0676a5cd8e7b9&#34;&gt;Optionals&lt;/h3&gt;

&lt;p&gt;An optional value either contains a value or a &lt;code&gt;nil&lt;/code&gt; to indicate that a value is missing. I first learnt about the &lt;code&gt;Option&lt;/code&gt; type in Scala and the benefits of using a dedicated type for this became evident early on. Being a strongly typed language, Swift encourages using optionals to ensure safety.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# in the python world one would 
# do the following
msg = raw_prompt()
if msg {
  // raises a compile error
  print(msg + &amp;quot;, world&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While this is an accepted practice in lots of languages, the right way in Swift to do this is like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let msg: String? = &amp;quot;hello&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells the compiler that the variable &lt;code&gt;msg&lt;/code&gt; can have a value or be a &lt;code&gt;nil&lt;/code&gt;. Why is this awesome? I think this is definitely better than remembering the arcane rules other programming languages have. For example, in some cases a blank String is &lt;code&gt;truthy&lt;/code&gt; while in others it is &lt;code&gt;falsy&lt;/code&gt; e.g. Javascript. In PHP as an empty string is &lt;code&gt;falsy&lt;/code&gt; one would expect the string &lt;code&gt;&amp;quot;0&amp;quot;&lt;/code&gt; to be &lt;code&gt;truthy&lt;/code&gt; but its not &lt;em&gt;[this is because the &lt;code&gt;&amp;quot;0&amp;quot;&lt;/code&gt; is typecasted into a int]&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;How do you use it? Let us assume you have a &lt;code&gt;User&lt;/code&gt; object that stores information about a user and you define a collection that stores a collection of the &lt;code&gt;User&lt;/code&gt; object. You need to define a &lt;code&gt;findById&lt;/code&gt; function that returns the User object associated with that &lt;code&gt;id&lt;/code&gt;. Here&amp;rsquo;s how you can do it&lt;/p&gt;

&lt;p&gt;{% highlight scala %}
func findById(id: Int, users: User[]) -&amp;gt; User? {
  for u in Users {
    if u.id == id {
      return u
    }&lt;br /&gt;
  }
  return nil
}&lt;/p&gt;

&lt;p&gt;// user is bound to value in case nil is not returned
if let user = findById(1, users) {
  println(&amp;ldquo;user found: (user.name)&amp;ldquo;)
} else {
  println(&amp;ldquo;user not found&amp;rdquo;)
}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;One last thing that might trip up beginners is the user &lt;code&gt;!&lt;/code&gt; to force unwrapping of the optional. Using a &lt;code&gt;!&lt;/code&gt; simply means that you&amp;rsquo;re sure the optional contains a value and you want to access it.&lt;/p&gt;

&lt;p&gt;{% highlight scala %}
if findById(1, users) {
  println(&amp;ldquo;user found: (findById(1, users)!.name)&amp;ldquo;)
} else {
  println(&amp;ldquo;user not found&amp;rdquo;)
}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Having optionals helps you keep your mind free from all these rules and helps eliminate potential bugs.&lt;/p&gt;

&lt;h3 id=&#34;ranges:9c765f6cd3c9cb3494c0676a5cd8e7b9&#34;&gt;Ranges&lt;/h3&gt;

&lt;p&gt;Very simple and straightforward - ranges are my most preferred way of iterating through a collection of integers. Ranges are present in both Python and Ruby, and I&amp;rsquo;d be lying if I say that I don&amp;rsquo;t miss them in Javascript.&lt;/p&gt;

&lt;p&gt;{% highlight scala %}
// Swift
for i in 0..10 {
  println(i)
}&lt;/p&gt;

&lt;p&gt;// Python
for i in range(0, 10) {
  print(i)
}&lt;/p&gt;

&lt;p&gt;// Ruby
for i in 0..10 {
  print i
}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Unfortunately usage of ranges in Go are different from the example above. Since there&amp;rsquo;s no way to create an array (or a slice) by just specifying the start and end of the collection, &lt;code&gt;Range(1,20)&lt;/code&gt; doesn&amp;rsquo;t work. From the &lt;a href=&#34;http://golang.org/ref/spec#RangeClause&#34;&gt;documentation&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The expression on the right in the &amp;ldquo;range&amp;rdquo; clause is called the range expression, which may be an array, pointer to an array, slice, string, map, or channel permitting receive operations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One thing that both Go and Swift share (w.r.t. ranges) is ignoring values using the &lt;code&gt;_&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;{% highlight scala %}
var (n, answer, base) = (4, 10, 2)
for _ in 0..n {
  answer += base
}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;This is a nice-to-have feature if you don&amp;rsquo;t want to populate the local namespace.&lt;/p&gt;

&lt;h3 id=&#34;closures:9c765f6cd3c9cb3494c0676a5cd8e7b9&#34;&gt;Closures&lt;/h3&gt;

&lt;p&gt;If you have any Javascript experience under your belt, chances are you have used closures. Closures are common in languages in which functions are treated as first-class citizens. I&amp;rsquo;ll not go into details of explaining what closures are but to put it in one line - they are self-contained blocks of code that can be passed around your code. Closures basically capture or &lt;em&gt;close&lt;/em&gt; the values of the data from the context in which they were defined.&lt;/p&gt;

&lt;p&gt;Swift allows a lot of syntactic sugar when it comes to closures, making them a joy to use. The 4 primary features are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inferring parameter and return value types from context.&lt;/li&gt;
&lt;li&gt;Implicit returns from single-expression closures&lt;/li&gt;
&lt;li&gt;Shorthand argument names&lt;/li&gt;
&lt;li&gt;Trailing closure syntax&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me illustrate the points below with a practical example. We will use the &lt;code&gt;sort&lt;/code&gt; function which takes a collection and a function (closure) on which the function is sorted.&lt;/p&gt;

&lt;p&gt;{% highlight scala %}
let fruits = [&amp;ldquo;apples&amp;rdquo;, &amp;ldquo;oranges&amp;rdquo;, &amp;ldquo;banana&amp;rdquo;, &amp;ldquo;pear&amp;rdquo;]&lt;/p&gt;

&lt;p&gt;func longest(s1: String, s2: String) -&amp;gt; Bool {
  return countElements(s1) &amp;gt; countElements(s2)
}&lt;/p&gt;

&lt;p&gt;// returns [&amp;ldquo;oranges&amp;rdquo;, &amp;ldquo;banana&amp;rdquo;, &amp;ldquo;apples&amp;rdquo;, &amp;ldquo;pear&amp;rdquo;]
sort(fruits, longest)
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;The equivalent closure for to accomplish the above would be -
{% highlight scala %}
sort(fruits, { (s1: String, s2: String) -&amp;gt; Bool in
  return countElements(s1) &amp;gt; countElements(s2)
})
{% endhighlight %}
The code after &lt;code&gt;in&lt;/code&gt; begins the closure. We will see how the features provided by Swift makes it much much easier to do the same thing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Inferring parameter and return value types from context&lt;/strong&gt;.
{% highlight scala %}
// removing the type information
sort(fruits, { (s1, s2) in
  return countElements(s1) &amp;gt; countElements(s2)
})
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Implicit returns from single-expression closures&lt;/strong&gt;
{% highlight scala %}
// remove the explicit return
sort(fruits, { (s1, s2) in&lt;br /&gt;
  countElements(s1) &amp;gt; countElements(s2)
})
{% endhighlight %}
&lt;strong&gt;Shorthand argument names&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;{% highlight scala %}
// $0 refers to the first arg, $1 refers to the second
sort(fruits, { countElements($0) &amp;gt; countElements($1) })
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trailing closure syntax&lt;/strong&gt;
{% highlight scala %}
// syntactic sugar to allow passing a closure outside of a function call
sort(fruits) { countElements($0) &amp;gt; countElements($1) }
{% endhighlight %}&lt;/p&gt;

&lt;h3 id=&#34;map-filter-and-reduce:9c765f6cd3c9cb3494c0676a5cd8e7b9&#34;&gt;Map, Filter and Reduce&lt;/h3&gt;

&lt;p&gt;Directly incorporated from the functional programming world, the functions &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; are available on all collections to help you iterate through a collection, perform an operation and return a new collection. The syntax is similar to closure so it is quite intuitive once you get a hang of it.&lt;/p&gt;

&lt;p&gt;{% highlight scala %}
let numbers = [12, 49, 23, 44, 143]&lt;/p&gt;

&lt;p&gt;let squares = numbers.map { $0 * $0 } // squares of numbers
// squares [144, 2401, 529, 1936, 20449]&lt;/p&gt;

&lt;p&gt;let even = numbers.filter { $0 % 2 == 0}  // filter all even
// even [12, 44]&lt;/p&gt;

&lt;p&gt;let sum = numbers.reduce(0, combine: {$0 + $1}) // finding the sum of the elements
// sum 271
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;If you haven&amp;rsquo;t tried Swift yet, I encourage you to give it a shot. Its a fun language and Apple&amp;rsquo;s building a great ecosystem around it. Expect people to share their playground files with cool demos once Xcode 6 becomes stable. I am super excited to see what the future holds!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>